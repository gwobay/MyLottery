/*
 * 1.2 version.
 */

import java.io.*;
import java.util.Arrays;
/*
import java.util.*;
*/
import java.util.Date;
import java.util.Calendar;
//import java.util.regex.*;
import java.awt.*;
import java.text.DecimalFormat;
import java.awt.geom.*;

import javax.swing.*;

import java.awt.image.*;

import javax.imageio.*;

import java.io.File;
import java.util.Vector;
import java.util.concurrent.locks.ReadWriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.io.IOException;
import java.lang.Thread;

/* 
 * This is like the FontDemo applet in volume 1, except that it 
 * uses the Java 2D APIs to define and render the graphics and text.
 *
 * read data file data5day generated by Script c.data5day
 */

public class ExpanedDropDataFilter extends JFrame implements Runnable 
{
/**
	
	 */
	private static final long serialVersionUID = 161720875199630789L;
	//start of program
	final static DecimalFormat dF=new DecimalFormat("0.00");
    final static int maxCharHeight = 30;
    final static int minFontSize = 12;
    final static int maxchartPoints = 400;

    final static Color bg = Color.white;
    final static Color fg = Color.black;
    final static Color red = Color.red;
    final static Color white = Color.white;

    final static BasicStroke stroke = new BasicStroke(2.0f);
    final static BasicStroke wideStroke = new BasicStroke(8.0f);

    final static float dash1[] = {10.0f};
    final static BasicStroke dashed = new BasicStroke(1.0f, 
                                                      BasicStroke.CAP_BUTT, 
                                                      BasicStroke.JOIN_MITER, 
                                                      10.0f, dash1, 0.0f);
	private static DecimalFormat dataF=new DecimalFormat("##.##");
	private static DecimalFormat dataIntF=new DecimalFormat("00");
	//static String DataSrc=new String("daily_d.txt");
    //static JFrame f;
	


    FontMetrics fontMetrics;
	static long today1stSecond=0, today930Second=0;

      
	
	Vector<String> myQuotes;
	String lastQuoteTime;
	static String mktStartTime="09:30";
	String samplingStartFrom;
	String samplingEnd;
	public String mySymbol;
	String YhSymb;
	int pVolume;
	int lastPVolTime;
	
	double priceMax, priceMin;
	int volDeltaMax, volDeltaMin;
	boolean testMode;
	String lastPrice;
	String lastVol;
	String lastChange;
	boolean isFileData;
   
	static int iMax=40;
	static int iMin=0;
	static int totalPoints=320;
	static int[] pointLine1=new int[maxchartPoints];
	static int[] pointLine2=new int[maxchartPoints];
	static int[] pointLine3=new int[maxchartPoints];
	static int[] pointLine4=new int[maxchartPoints];
	static int[] pointLine5=new int[maxchartPoints];
	static String outputDir="C:\\Users\\eric\\workspace\\GetLottery";

private class DrawData
{
public double price;
public int volDelta;
	public DrawData(double x, int y)
	{
		price=x;
		volDelta=y;
	}
	public String toString()
	{
		return "("+dataF.format(price)+", "+dataIntF.format(volDelta)+")";
	}
}

Vector<DrawData> myDrawData;
int hits;
int maxNumber;

public void init() 
{
        //Initialize drawing colors
        setBackground(bg);
        setForeground(fg);
	
}
   
	static FontMetrics pickFont(Graphics2D g2,
                         String longString,
                         int xSpace) 
	{
        	//boolean fontFits = false;
	        Font font = g2.getFont();
	        String name = font.getName();
	        int style = font.getStyle();
		g2.setFont(font = new Font(name,  style, minFontSize+20));
	        do
		{
			FontMetrics fontMetrics = g2.getFontMetrics();
	        	if ( (fontMetrics.getHeight() <= maxCharHeight)
                		 && (fontMetrics.stringWidth(longString)) <= xSpace)
			break;
			int size=g2.getFont().getSize();
			g2.setFont(font = new Font(name,  style, size-1));
        	} while (g2.getFont().getSize() > minFontSize);

	        return g2.getFontMetrics();
	}

	static int iCurrent=0;
	static int[] currentLine=null;//pointLine1;
	boolean drawSpecial;
	int[] specialData;
	Vector<int[]> samples;
	
	boolean drawGraphics(Graphics2D g2, Dimension d, Vector<int[]> dataSamples)
	{
		if (dataSamples==null || dataSamples.size()<1) return false;
	//int dmX=d.width;
	//int dmY=d.height;
		
        //Graphics2D g2 = (Graphics2D) g;
	String exS="15.6";
	 g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
        //Dimension d = getSize();

        fontMetrics = pickFont(g2, exS, (int)(d.width*0.2));
	g2.setBackground(Color.white);
	int showWidth=fontMetrics.stringWidth(exS);
	int showHeight=fontMetrics.getHeight();
        //Color fg3D = Color.lightGray;

    int myChartWidth = (int)(d.width*0.95);
        //int myGridHeight = d.height/10;   //3/10 for vol, 6/10 for price  
	int myChartHeight=95*d.height/100;
	
        
	//readTodayData();
	
	g2.clearRect(0,0, d.width, d.height);
	Color[] useColors={Color.BLUE, Color.ORANGE, Color.MAGENTA, Color.GREEN, Color.RED};

	//totalPoints=dataSamples.get(0).length;
	
	int dY=d.height/(maxNumber*11/10);
	int dX=d.width/(totalPoints+5);
	
    int xPos=myChartWidth-showWidth/2-dX;
    g2.setColor(Color.black);
    g2.setStroke(dashed);//new BasicStroke(1.0f));
    	
	g2.setColor(Color.black);
	g2.setStroke(stroke);
	for (int i=1; i<maxNumber+1; i += 2)
	{
		g2.drawString(""+i, myChartWidth-showWidth/3, i*dY);
		g2.draw(new Line2D.Double(myChartWidth-showWidth/2, i*dY, myChartWidth-showWidth/2+1, i*dY));
	}
        g2.draw(new Line2D.Double(0, 0, myChartWidth, 0));
        xPos=myChartWidth-showWidth/2;
                
        g2.draw(new Line2D.Double(xPos, 0, xPos, myChartHeight));
       
        GeneralPath[] polylineD = new GeneralPath[hits];
        for (int i=0; i<dataSamples.size(); i++){
        	polylineD[i]=new GeneralPath(GeneralPath.WIND_EVEN_ODD,totalPoints);       	
        	polylineD[i].moveTo(xPos, dataSamples.get(i)[0]*dY);
        }
                
        for (int i=0; i<totalPoints; i++)
        {
        	xPos -= dX;
        	if (dataSamples.get(0)[i]==0) 
        		{break;}
        	for (int j=0; j<dataSamples.size(); j++)
        	{        		
        		polylineD[j].lineTo(xPos, dataSamples.get(j)[i]*dY);
        		//int j=lineNumber;
        		//polylineD[j].lineTo(xPos, dataSamples.get(j)[i]*dY);
        	}
        	if (i % 5 == 0){
        		g2.drawString(""+i, xPos, (maxNumber+1)*dY);
        		g2.draw(new Line2D.Double(xPos, 0, xPos, (maxNumber+1)*dY));
        	}
        }
        for (int i=0; i<dataSamples.size(); i++){
        	g2.setColor(useColors[i]);
        	g2.draw(polylineD[i]);
        }

        if (drawSpecial && specialData != null && specialData.length > 5){
        	GeneralPath polylineS = new GeneralPath(GeneralPath.WIND_EVEN_ODD,specialData.length); 
        	xPos=myChartWidth-showWidth/2;
        	polylineS.moveTo(xPos, specialData[0]);
        	for (int i=0; i<specialData.length; i++){
        		xPos -= dX;
        		polylineS.lineTo(xPos, (40-specialData[i])*dY);
        	}
        	g2.setColor(Color.red);
        	g2.draw(polylineS);
        }
	return true;
	}

	BufferedImage buildImgBuf(Dimension d)
	{

	//int dmX=d.width;
	//int dmY=d.height;
	//Rectangle area=new Rectangle(d);
	BufferedImage gBufImg= ImgFactory.getImg(500, 600); //new BufferedImage(dmX, dmY, BufferedImage.TYPE_INT_ARGB);
	Graphics2D g2=gBufImg.createGraphics();
	if (drawGraphics(g2, d, samples))
		return gBufImg;
		return null;

	}

    public void paint(Graphics g) {
        Graphics2D g2 = (Graphics2D) g;
        Dimension d = getSize();
	BufferedImage toDraw=buildImgBuf(d);
	if (toDraw != null) g2.drawImage(toDraw, null, 0, 0);

	g2.dispose();
	
	}

	public boolean fillImg(BufferedImage bi, int width, int height, Vector<int[]> dataSamples)
	{
	Graphics g=bi.createGraphics();
	
		Graphics2D g2 = (Graphics2D) g;
        	//BufferedImage toDraw=buildImgBuf(new Dimension(width, height));
		boolean ok=drawGraphics(g2, new Dimension(width, height), dataSamples);
		//if (toDraw == null) return false;
		g2.setBackground(Color.white);
		
		if (ok) g2.drawImage(bi, null, 0, 0);
		return ok;	
	}

synchronized boolean putImg2File(BufferedImage bi, File toFile)
{
	try {
		ImageIO.write(bi, "png", toFile);
	} catch (IOException e){return false;}
		return true;
}

void getPngFile(BufferedImage bi, int width, int height, String fileName, Vector<int[]> dataSamples)
{
	Graphics g=bi.getGraphics();

	fillImg(bi, width, height, dataSamples);
	Graphics2D g2=(Graphics2D)g;
	g2.getBackground();
        
	g2.drawImage(bi, null, 0, 0);
	
	String dFF=fileName;
	File myNew=new File(dFF+".png");
	if (putImg2File(bi, myNew) ){
		File myDup=new File(dFF+"_2.png");
		File myOld=new File(dFF+"Old.png");
		if (myOld.exists()) myOld.delete();
		if (myDup.exists() && !myOld.exists()) myDup.renameTo(myOld);
		myNew.renameTo(myDup);
	}
	return;
}
		
String forFile;
static String fileBase;
int lineNumber=0;
boolean drawMultiple;
public void drawDelta(int[] deltaData)
{
	int width=600, height=500;
	BufferedImage bi=ImgFactory.getImg(width, height); //new BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB);
	Graphics g=bi.getGraphics();
	drawSpecial=true;
	specialData=deltaData;
	getPngFile(bi, width, height, fileBase+forFile+"Delta", samples);
	
}
public void run1() 
{
        //ShapesDemo2D Demo2D = new ShapesDemo2D();
        //f.getContentPane().add("Center", Demo2D);
        //Demo2D.init();
        int width=600, height=500;
//System.out.println("I am here");
	//readChartData();
	//f.pack();
	//Demo2D.setSize(new Dimension(width, height));
        //f.setSize(new Dimension(width, height));
        //f.setVisible(true);
	//BufferedImage bi=(BufferedImage)Demo2D.createImage(width, height);
	BufferedImage bi=ImgFactory.getImg(width, height); //new BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB);
	Graphics g=bi.getGraphics();
	//paint(g);
	//Demo2D.paint(g);
	//int i=0;
	//if (myQuotes.size() <1) return;
	if (drawMultiple){
		getPngFile(bi, width, height, fileBase+forFile+"ALL", samples);
		return;
	}
	
	for (int i=0; i<5; i++){
		Vector<int[]> thisSample=new Vector<int[]>();
		thisSample.add(samples.get(i));
		getPngFile(bi, width, height, fileBase+forFile+"_"+i, thisSample);
	}
}

static double[] getRangePDF(int from, int to, Vector<int[]> refD){
	double[] linePdf=new double[40];
	Arrays.fill(linePdf,0);
	int iC=0;
	boolean stop=false;
	for (int i=from; i<to; i++){
		for (int s=0; s<refD.size(); s++){
			if (refD.get(s)[i]==0) {				
				stop=true;
				break;
			}
			iC++;
			linePdf[refD.get(s)[i]]++;
		}
		if (stop) break;
	}
	for (int i=0; i<40; i++){
		linePdf[i] /= (1*iC);
	}
	return linePdf;
}

static Vector<float[]> linePDF(Vector<int[]> refD){
	Vector<float[]> retV=new Vector<float[]>();
	for (int s=0; s<refD.size(); s++){
		float[] linePdf=new float[40];
		Arrays.fill(linePdf, 0);
		for (int i=0; i<refD.get(0).length; i++){
			linePdf[refD.get(s)[i]]++;
		}
		for (int i=0; i<40; i++){
			linePdf[i] /= refD.get(0).length;
		}
		retV.add(linePdf);
	}
	return retV;
}

static Vector<float[]> measureLinePDF(double[] pdf, Vector<int[]> refD){
	Vector<float[]> retV=new Vector<float[]>();
	for (int s=0; s<refD.size(); s++){
		float[] linePdf=new float[40];
		Arrays.fill(linePdf, 0);
		for (int i=0; i<refD.get(0).length; i++){
			//double v=
			linePdf[refD.get(s)[i]] += pdf[refD.get(s)[i]];
		}
		//for (int i=0; i<40; i++){
			//linePdf[i] /= refD.get(0).length;
		//}
		retV.add(linePdf);
	}
	return retV;
}

void bulkNormalization(Vector<int[]> inData){
	Vector<int[]> outResult=new Vector<int[]>();
	final int totalSample=inData.get(0).length;
	int[] iValue=new int[totalSample];
	int iSet=inData.size();
	long fMax=-9999999, fMin=999999;
	for (int i=0; i<iSet; i++){
		for (int n=1; n<totalSample; n++)
		{
			int value=inData.get(i)[n];
			if (fMax < value) fMax=value;
			if (fMin > value) fMin=value;
		}
	}
	for (int i=0; i<iSet; i++){
		for (int n=1; n<totalSample; n++)
		{
			float m=inData.get(i)[n];
				m -= fMin;
				m /= (fMax-fMin);
				m *= 38;
				inData.get(i)[n]=39-Math.round(m);
		}	
	}	
}

static Vector<int[]>  getPrimeData(Vector<int[]> inData){
	Vector<int[]> retV=new Vector<int[]>();
	final int totalSample=inData.get(0).length;
	for (int k=0; k<inData.size(); k++){
		int[] prime=new int[totalSample];
		for (int i=0; i<totalSample-1; i++){
			prime[i]=inData.get(k)[i]-inData.get(k)[i+1];
		}
		retV.add(prime);
	}
	return retV;
}

static Vector<int[]>  getAscendPrimeData(Vector<int[]> inData){
	Vector<int[]> retV=new Vector<int[]>();
	final int totalSample=inData.get(0).length;
	for (int k=0; k<inData.size(); k++){
		int[] prime=new int[totalSample];
		for (int i=0; i<totalSample-1; i++){
			prime[i]=inData.get(k)[i+1]-inData.get(k)[i];
		}
		retV.add(prime);
	}
	return retV;
}
int[] rangeBulkReplication(Vector<int[]> inData, int range){
	Vector<int[]> outResult=new Vector<int[]>();
	final int totalSample=inData.get(0).length;
	if (totalSample < range) return null;
	
	Vector<int[]> prime=getPrimeData(inData);
	int[] iValue=new int[totalSample];
	Arrays.fill(iValue, 40);
	int iSet=inData.size();
	float[] avg=new float[iSet];
	Arrays.fill(avg, 0);
	for (int i=0; i<iSet; i++){
		int[] home=Arrays.copyOf(prime.get(i), range);//inData.get(i), range);
		
		outResult.add(Arrays.copyOf(iValue, iValue.length));	
		for (int j=1; j<totalSample-range-1; j++){
			long value=0;
			for (int k=0; k<range; k++){
				value += Math.abs(prime.get(i)[j+k]-home[k]);
			}
			outResult.get(i)[j]=(int)value;
		}
	}
	outResult.add(Arrays.copyOf(iValue, iValue.length)); //additional set for calculated
	
	long fMax=-9999999, fMin=999999;
	
		for (int n=1; n<totalSample-range; n++)
		{
			long value=0;
			for (int i=0; i<iSet; i++){
				value += outResult.get(i)[n];
			}
			if (fMax < value) fMax=value;
			if (fMin > value) fMin=value;
			outResult.get(iSet)[n]=(int)value;
		}
		
		for (int n=1; n<totalSample-range; n++)
		{
			float m=outResult.get(iSet)[n];
				m -= fMin;
				m /= (fMax-fMin);
				m *= 38;
				outResult.get(iSet)[n]=39-Math.round(m);
		}	
	System.out.println("Range "+range+"; has max="+fMax+"; min="+fMin);
	return outResult.get(iSet);
}

static Vector<int[]> newProject=new Vector<int[]>();
Vector<int[]> rangeReplication(Vector<int[]> inData, int range){
	Vector<int[]> outResult=new Vector<int[]>();
	final int totalSample=inData.get(0).length;
	if (totalSample < range) return null;
	Vector<int[]> prime=prime1;//getPrimeData(inData);
	//Vector<int[]> prime2=getPrimeData(inData);
	int[] iValue=new int[totalSample];
	Arrays.fill(iValue, 40);
	int iSet=inData.size();
	float[] avg=new float[iSet];
	Arrays.fill(avg, 0);
	for (int i=0; i<iSet; i++){
		int[] home=Arrays.copyOf(prime.get(i), range);
		outResult.add(Arrays.copyOf(iValue, iValue.length));	
		long fMax=-9999999, fMin=999999;		
		for (int j=1; j<totalSample-range-1; j++){
			long value=0;
			for (int k=0; k<range; k++){
				value += Math.abs(prime.get(i)[j+k]-home[k]);
			}
			if (fMax < value) fMax=value;
			if (fMin > value) fMin=value;
			outResult.get(i)[j]=(int)value;
		}
		for (int n=1; n<totalSample-range; n++)
		{
			float m=outResult.get(i)[n];
				m -= fMin;
				m /= (fMax-fMin);
				m *= 38;
				outResult.get(i)[n]=39-Math.round(m);
		}	
	}
	
	newProject.clear();
	for (int k=0; k<5; k++){
		//System.out.print("Line "+k+" range "+range+ "has 1st/2nd deriv (");
		for (int i=0; i<range-1; i++){
			//System.out.print(","+prime1.get(k)[i]+"/"+prime2.get(k)[i]);
		} 
		int[] projects=new int[totalSample-range-1];
		int iProj=0;
		//System.out.println(")");
		for (int i=1; i<totalSample-range-1; i++){
			if (outResult.get(k)[i] > 37) {
				//System.out.print("Line "+k+", with "+outResult.get(k)[i]+" at "+i+" 1st/2nd prime(");
				for (int p=0; p<range-1; p++){
					//System.out.print(""+prime1.get(k)[i+p]+"/"+prime2.get(k)[i+p]+",");
				} 
				projects[iProj++]=inData.get(k)[0]+prime1.get(k)[i-1];
				//System.out.println(") and project:["+(inData.get(k)[0]+prime1.get(k)[i-1]));
			}
		}
		//newProject.add(Arrays.copyOf(projects, iProj));
		System.out.print("Line "+k+" range "+range+ " has projects (");
		for (int i=0; i<iProj; i++){
			System.out.print(""+projects[i]+",");
		}
		System.out.println(") ");
	}
	
	return outResult;
}

Vector<int[]> deltaAverage(Vector<int[]> inData, int range){
	Vector<int[]> outResult=new Vector<int[]>(); 
	//each line return pos delta, neg delta, abs delta
	//get delta average, delta max freq delta deviation
	final int totalSample=inData.get(0).length;
	if (totalSample < range) return null;
	int iSet=inData.size();
	float[] avg=new float[iSet];
	Arrays.fill(avg, 0);
	for (int i=0; i<iSet; i++){
		int iPos=0, iNeg=0, iAbs=0;
		long posV=0, negV=0, absV=0;
		int[] iValue=new int[range]; //to store delta
		Arrays.fill(iValue, 40);
		int[] iFreq=new int[40*2];
		Arrays.fill(iFreq, 0);
			
		long fMax=-9999999, fMin=999999;		
		for (int j=0; j<range; j++){
			iValue[j]=inData.get(i)[j]-inData.get(i)[j+1];
			iFreq[40+iValue[j]]++;
			if (iValue[j] > 0) {iPos++; posV += iValue[j]; absV += iValue[j];}
			else if (iValue[j] < 0) {iNeg++; negV += iValue[j]; absV -= iValue[j];}			
		}
		outResult.add(iFreq);
		System.out.println("Line "+i+" for range "+range+" has pos d="+posV/iPos+"; neg d="+negV/iNeg+" abs d="+absV/range);
	}
		
	return outResult;
}

Vector<int[]> movingAverage(Vector<int[]> inData, int range){
	Vector<int[]> outResult=new Vector<int[]>();
	final int totalSample=inData.get(0).length;
	if (totalSample < range) return null;
	
	int[] iValue=new int[totalSample];
	Arrays.fill(iValue, 40);
	int iSet=inData.size();
	float[] avg=new float[iSet];
	Arrays.fill(avg, 0);
	for (int i=0; i<iSet; i++){
		//int[] home=Arrays.copyOf(inData.get(i), range);
		outResult.add(Arrays.copyOf(iValue, iValue.length));	
				
		for (int j=0; j<totalSample-range; j++){
			long value=0;
			for (int k=0; k<range; k++){
				//value += (inData.get(i)[j+k]-home[k])*(inData.get(i)[j+k]-home[k]);
				value += inData.get(i)[j+k];
			}
			value /=range;
			outResult.get(i)[j]=(int)value;
		}
	}
	return outResult;
}
//measuredAutoCorrelation

static Vector<int[]> measuredRangeAutoCorrelation(Vector<int[]> inData, int range){
	Vector<int[]> outResult=new Vector<int[]>();
	int dataLength=inData.get(0).length;
	int[] iValue=new int[dataLength];
	Arrays.fill(iValue, 0);
	int iSet=inData.size();
	
	
	double[] pdf=getRangePDF(0, inData.get(0).length, inData);
	
	
	//double[] 
			measuredAvg=new double[iSet];
	Arrays.fill(measuredAvg, 0);
	for (int i=0; i<iSet; i++){
		outResult.add(Arrays.copyOf(iValue, iValue.length));
		int k=inData.get(i).length;
		for (int j=0; j<k; j++)
		{
			measuredAvg[i] += (inData.get(i)[j]*pdf[inData.get(i)[j]]);
		}
		//avg[i] /= k;		
	}
	for (int i=0; i<iSet; i++){
		outResult.add(Arrays.copyOf(iValue, dataLength-range));
		//int k=inData.get(0).length;
		float fMax=-9999999, fMin=999999;
		for (int j=1; j<dataLength-range; j++)
		{
			float value=0;
			for (int n=0; n<range; n++){
				float f1=inData.get(i)[n];
				if (n+j >= dataLength) continue;
				float f2=inData.get(i)[j+n];
			value += (f1-measuredAvg[i])*(f2-measuredAvg[i]);
			}
			if (fMax < value) fMax=value;
			if (fMin > value) fMin=value;
			outResult.get(i)[j]=Math.round(value);
		}
		if (Math.abs(fMin)>fMax){
			System.out.println("line "+i+" has inverAuto");
			fMax=Math.abs(fMin);
		}
		for (int n=1; n<dataLength-range; n++)
		{
			float m=Math.abs(outResult.get(i)[n]);
				//m -= fMin;
				m /= (fMax);//-fMin);
				m *= 38;
				outResult.get(i)[n]=Math.round(m)+1;
		}	
		outResult.get(i)[0]=0;
	}
	return outResult;
}

static Vector<int[]> getRangeAutoCorrelation(Vector<int[]> inData, int range){
	Vector<int[]> outResult=new Vector<int[]>();
	int dataLength=inData.get(0).length;
	int[] iValue=new int[dataLength];
	Arrays.fill(iValue, 0);
	int iSet=inData.size();
	float[] avg=new float[iSet];
	Arrays.fill(avg, 0);
	
	for (int i=0; i<iSet; i++){
		outResult.add(Arrays.copyOf(iValue, dataLength-range));
		//int k=inData.get(0).length;
		float fMax=-9999999, fMin=999999;
		for (int j=1; j<dataLength-range; j++)
		{
			float avg1=0;
			for (int n=0; n<range; n++)
			{
				avg1 += inData.get(i)[j+n];
			}
			avg1 /= range;	
			float value=0;
			for (int n=0; n<range; n++){
				float f1=inData.get(i)[n];
				if (n+j >= dataLength) continue;
				float f2=inData.get(i)[j+n];
			value += (f1-avg1)*(f2-avg1);
			}
			if (fMax < value) fMax=value;
			if (fMin > value) fMin=value;
			outResult.get(i)[j]=Math.round(value);
		}
		if (Math.abs(fMin)>fMax){
			System.out.println("line "+i+" has inverAuto");
			fMax=Math.abs(fMin);
		}
		for (int n=1; n<dataLength-range; n++)
		{
			float m=Math.abs(outResult.get(i)[n]);
				//m -= fMin;
				m /= (fMax);//-fMin);
				m *= 38;
				outResult.get(i)[n]=Math.round(m)+1;
		}	
		outResult.get(i)[0]=0;
	}
	return outResult;
}

int tryMeasuredAutoCorrelation(int tryAt, int[] inData){
	if (tryAt > inData.length-20) return 0;
	float[] retData=new float[40];
	int[] tryData=new int[inData.length+1];
	for (int i=0; i<inData.length; i++){
		tryData[i+1]=inData[i];
	}
	int[] iValue=new int[inData.length];
	Arrays.fill(iValue, 0);
	retData[0]=0;
	for (int p=1; p<40; p++){
		float avg=0;
		tryData[0]=p;
		int k=inData.length+1;
		for (int j=0; j<k; j++)
		{
			avg += tryData[j];
		}
		avg /= k;		
		float fMax=-9999999;
		
		for (int j=1; j<k; j++)
		{
			float value=0;
			for (int n=0; n<k; n++){
				float f1=tryData[n];
				if (n-j<0) continue;
				float f2=tryData[n-j];
			value += (f1-avg)*(f2-avg);
			}
			if (fMax < value) { fMax=value; }
		}
		retData[p]=fMax;
	}
	int maxAt=0;
	float fMax=-9999999;
	for (int i=0; i<40; i++){
		if (fMax < retData[i]) {
			fMax = retData[i];
			maxAt=i;
		}
	}
	System.out.println("found max when try "+maxAt);
		return maxAt;
}

int getTryAutoCorrelation(int tryAt, int[] inData){
	int range=inData.length-tryAt;
	if (range < 39)return -1;
	//if (inData.length-tryAt < 39*6) return 0;
	float[] retData=new float[40];
	int[] tryData=new int[inData.length+1];
	for (int i=0; i<inData.length; i++){
		tryData[i+1]=inData[i];
	}
	int[] iValue=new int[inData.length];
	Arrays.fill(iValue, 0);
	retData[0]=0;
	float avg=0;
	int k=inData.length+1;
	for (int j=0; j<k; j++)
	{
		avg += tryData[j];
	}
	avg /= k;
	if (measuredPDF==null)
		measuredPDF=getRangePDF(0, globalSample.get(0).length, globalSample);
	for (int p=1; p<40; p++){
		tryData[0]=p;				
		float fMax=-9999999;		
		float value=0;
			for (int n=tryAt; n<tryAt+range; n++){
				float f1=tryData[n];
				//if (n-tryAt<0) continue;
				float f2=tryData[n-tryAt];
				value += ((f1-avg)*(f2-avg)*measuredPDF[tryData[n]]);
			}
			if (fMax < value) { fMax=value; }
		
		retData[p]=Math.abs(fMax);
	}
	int maxAt=0;
	float fMax=-9999999;
	for (int i=0; i<40; i++){
		if (fMax < retData[i]) {
			fMax = retData[i];
			maxAt=i;
		}
	}
	System.out.println("found max when try "+maxAt);
		return maxAt;
}

static double[] noisePower;//autocorr(0)

static Vector<double[]> getAutoCorrelation(Vector<int[]> inData){
	Vector<double[]> outResult=new Vector<double[]>();
	double[] iValue=new double[inData.get(0).length];
	Arrays.fill(iValue, 0);
	int iSet=inData.size();
	float[] avg=new float[iSet];
	Arrays.fill(avg, 0);
	for (int i=0; i<iSet; i++){
		outResult.add(Arrays.copyOf(iValue, iValue.length));
		int k=inData.get(i).length;
		for (int j=0; j<k; j++)
		{
			avg[i] += inData.get(i)[j];
		}
		avg[i] /= k;		
	}
	noisePower=new double[iSet];
	for (int i=0; i<iSet; i++){
		int k=inData.get(0).length;
		float fMax=-9999999, fMin=999999;
		int maxAt=0, minAt=0;
		for (int j=0; j<k; j++)
		{
			float value=0;
			for (int n=0; n<k; n++){
				float f1=inData.get(i)[n];
				if (n-j<0) continue;
				float f2=inData.get(i)[n-j];
				value += (f1-avg[i])*(f2-avg[i]);
			}
			if (j>0) 
			{
				//if (fMax < value) { fMax=value; maxAt=j;}
				//if (fMin > value) { fMin=value; minAt=j;}
				outResult.get(i)[j]=value;//Math.round(value);
			}
			else
			noisePower[i]=value;
		}
		//System.out.println("line "+(i+1)+" has max "+fMax+" at "+maxAt+"; min "+fMin+" at "+minAt);
		//if (Math.abs(fMin) > fMax) fMax=-fMin;
		/*
		  for (int n=1; n<k; n++)
		 
		{
			float m=Math.abs(outResult.get(i)[n]);
				//m -= fMin;
				m /= (fMax);//-fMin);
				m *= 38;
				outResult.get(i)[n]=Math.round(m)+1;
		}
		*/
		outResult.get(i)[0]=0;
	}
	return outResult;
}
static double[] measuredPDF=null;
static double[] measuredAvg;
static Vector<double[]> measuredAutoCorrelation(Vector<int[]> inData){
	Vector<double[]> outResult=new Vector<double[]>();
	double[] pdf=getRangePDF(0, inData.get(0).length, inData);
	double[] iValue=new double[inData.get(0).length];
	Arrays.fill(iValue, 0);
	int iSet=inData.size();
	//double[] 
			measuredAvg=new double[iSet];
	Arrays.fill(measuredAvg, 0);
	for (int s=0; s<iSet; s++){
		outResult.add(Arrays.copyOf(iValue, iValue.length));
		int k=inData.get(s).length;
		for (int j=0; j<k; j++)
		{
			measuredAvg[s] += (inData.get(s)[j]*pdf[inData.get(s)[j]]);
		}
		//avg[i] /= k;		
	}
	noisePower=new double[iSet];
	for (int i=0; i<iSet; i++){
		int k=inData.get(0).length;
		float fMax=-9999999, fMin=999999;
		int maxAt=0, minAt=0;
		for (int j=0; j<k; j++)
		{
			float value=0;
			for (int n=0; n<k; n++){
				float f1=inData.get(i)[n];
				if (n-j<0) continue;
				float f2=inData.get(i)[n-j];
				value += ((f1-measuredAvg[i])*(f2-measuredAvg[i])*pdf[inData.get(i)[n]]);
			}
			if (j>0) 
			{
				//value=Math.abs(value);
				//if (fMax < value) { fMax=value; maxAt=j;}
				//if (fMin > value) { fMin=value; minAt=j;}
				outResult.get(i)[j]=value;//Math.round(value);
			}
			else
			noisePower[i]=value;
		}
		//System.out.println("line "+(i+1)+" has max "+fMax+" at "+maxAt+"; min "+fMin+" at "+minAt);
		//if (Math.abs(fMin) > fMax) fMax=-fMin;
		/*
		for (int n=1; n<k; n++)
		{
			float m=Math.abs(outResult.get(i)[n]);
				//m -= fMin;
				m /= (fMax);//-fMin);
				m *= 38;
				outResult.get(i)[n]=Math.round(m)+1;
		}
		*/	
		outResult.get(i)[0]=0;
	}
	return outResult;
}

static float getProject(int[] refD, int loc){
	int iLen=refD.length;
	int avgH=0;
	int avgL=0;
	float areaH=0;
	float areaL=0;
	for (int i=0; i<60; i++){
		avgH += refD[i];
		if (i+loc == refD.length) return -1;
		avgL += refD[i+loc];
	}
	avgL /= 60;
	avgH /= 60;
	for (int i=0; i<60; i++){
		areaH += Math.abs(refD[i]-avgH);
		areaL += Math.abs(refD[i+loc]-avgL);
	}
	float r=(areaL-areaH)/areaL;
	float d=(refD[loc-1]-refD[loc])*(1-r);
	return refD[0]+d;//Math.round(d);
}

Vector<int[]> putList2File(Vector<double[]> allList, String fileName, Vector<int[]> allRefD){
	BufferedWriter aWriter;
	Vector<int[]> returnV=new Vector<int[]>();
	try {
		aWriter=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(fileBase+fileName+".txt")));						
	 for (int s=0; s<5; s++){
		 double[] iList=allList.get(s);
		 int[] refD=allRefD.get(s);
	int iMx1=0, iAt1=0;
	int iMx2=0, iAt2=0;
	int iMx3=0, iAt3=0;
	for (int i=1; i<iList.length; i++){
		if (iList[i]==0) break;
		if (iList[i] < 20) continue;
		
			if (iList[i] > iMx1){
				iMx1=(int)Math.round(iList[i]);
				iAt1=i;
			}
			else
				if (iList[i] > iMx2){
					iMx2=(int)Math.round(iList[i]);
					iAt2=i;
				}
				else
					if (iList[i] > iMx3){
						iMx3=(int)Math.round(iList[i]);
						iAt3=i;
					}
			//if (i % 8 == 0) aWriter.newLine();
			//aWriter.newLine();				
				
	} 
	/*
	int[] mX=new int[iList.length/3];
	int iX=0;
	Arrays.fill(mX, 0);
	int[] m2=new int[iList.length/3];
	int i2=0;
	Arrays.fill(m2, 0);
	int[] m3=new int[iList.length/3];
	int i3=0;
	Arrays.fill(m3, 0);
	for (int i=0; i<iList.length; i++){
		if (iList[i]==iMx) mX[iX++]=i;
		if (iList[i]==iMx-1) m2[i2++]=i;
		if (iList[i]==iMx-2) m3[i3++]=i;
	}
	
		aWriter.newLine();
		aWriter.write(fileName+": mx "+iMx+"; [");
		for (int i=0; i<iX; i++) {
		*/
	aWriter.write("Line "+s); 
	aWriter.newLine();
			//if (mX[i] < 2) continue;
			float r=refD[iAt1-1]-refD[iAt1];
			r /= (refD[iAt1]);
			int sign=1;//(refD[iAt1+1]-refD[iAt1])*(refD[1]-refD[0])<0?-1:1;
						
			//double r=(1.0*refD[0]-1.0*refD[1])/(1.0*refD[mX[i]]-1.0*refD[mX[i]+1]);
			aWriter.write(", @"+iAt1+" shift:"+(refD[0]+sign*(refD[iAt1-1]-refD[iAt1]))+//(dF.format(refD[0]*(1.0+r))+
					", v-ratio:"+dF.format(getProject(refD, iAt1))+", next:"+refD[iAt1-1]);
				aWriter.write("]");
				//aWriter.write("try:("+getTryAutoCorrelation(mX[i]+1, refD)+")");		
		aWriter.newLine();
		
		iAt1=iAt2;
		sign=1;//(refD[iAt1+1]-refD[iAt1])*(refD[1]-refD[0])<0?-1:1;	
		//double r=(1.0*refD[0]-1.0*refD[1])/(1.0*refD[mX[i]]-1.0*refD[mX[i]+1]);
		aWriter.write(", @"+iAt1+" shift:"+(refD[0]+sign*(refD[iAt1-1]-refD[iAt1]))+//(dF.format(refD[0]*(1.0+r))+
				", v-ratio:"+dF.format(getProject(refD, iAt1))+", next:"+refD[iAt1-1]);
			aWriter.write("]");
			//aWriter.write("try:("+getTryAutoCorrelation(mX[i]+1, refD)+")");	
	aWriter.newLine();
	
	iAt1=iAt3;
	sign=1;//(refD[iAt1+1]-refD[iAt1])*(refD[1]-refD[0])<0?-1:1;
	//double r=(1.0*refD[0]-1.0*refD[1])/(1.0*refD[mX[i]]-1.0*refD[mX[i]+1]);
	aWriter.write(", @"+iAt1+" shift:"+(refD[0]+sign*(refD[iAt1-1]-refD[iAt1]))+//(dF.format(refD[0]*(1.0+r))+
			", v-ratio:"+dF.format(getProject(refD, iAt1))+", next:"+refD[iAt1-1]);
		aWriter.write("]");
		//aWriter.write("try:("+getTryAutoCorrelation(mX[i]+1, refD)+")");
		aWriter.newLine();
/*
		aWriter.write(fileName+": m2x "+(iMx-1)+"; [");
		for (int i=0; i<i2; i++) if (m2[i] > 1) aWriter.write(", "+refD[m2[i]]+"|"+refD[m2[i]-1]);
		aWriter.write("]");
		aWriter.newLine();
		aWriter.write(fileName+": m3x "+(iMx-2)+"; [");
		for (int i=0; i<i3; i++) if (m3[i] > 1) aWriter.write(", "+refD[m3[i]]+"|"+refD[m3[i]-1]);
		aWriter.write("]");
		aWriter.newLine();
		if (iX >0)
		returnV.add(Arrays.copyOf(mX, iX));
		if (i2 >0)
		returnV.add(Arrays.copyOf(m2, i2));
		if (i3>0)
		returnV.add(Arrays.copyOf(m3, i3));
		*/
	 }
		aWriter.close();
	} catch (IOException e) {
		// TODO Auto-generated catch block
		e.printStackTrace();
	}
	return returnV;
}

static void evaluateAutoCorr(Vector<int[]> refData){
	BufferedWriter aWriter;
	int[] found_ratio=new int[6];
	Arrays.fill(found_ratio, 0);
	Vector<int[]> returnV=new Vector<int[]>();
	int[] totalFits=new int[6];
	Arrays.fill(totalFits, 0);
	try {
		aWriter=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(fileBase+"testPrimeAuto"+".txt")));						
	

	int iLen=refData.get(0).length;
	while (refData.get(0)[--iLen]==0) continue;
	int[] hits=new int[5];
	int[] found=new int[40];
	for (int i=iLen-78*3; i>-1; i--)
	{
		String text="****("+i+")**********check <<";
		Vector<int[]> testData=new Vector<int[]>();
		for (int s=0; s<5; s++){
			hits[s]=refData.get(s)[i];
			text += (""+hits[s]+", ");
			testData.add(Arrays.copyOfRange(refData.get(s), i+1, 390));
		}
		text += ">>";
		Vector<double[]> rho=measuredAutoCorrelation(testData);
					//measuredRangeAutoCorrelation(testData, 78);
		//getRangeAutoCorrelation(testData, 78);
		int[] preds=new int[40];
		Arrays.fill(totalFits, 0);
		int found_count=0;
		aWriter.write(text); aWriter.newLine();
		Arrays.fill(found, 0);
		text =" found (";
		for (int s=0; s<5; s++){
			for (int ix=0; ix<rho.get(s).length; ix++){			
				if (rho.get(s)[ix]!=39) continue;
				float r=testData.get(s)[ix-1]-testData.get(s)[ix];
				r /= (testData.get(s)[ix]);
				int p=testData.get(s)[0]+testData.get(s)[ix-1]-testData.get(s)[ix];
				if (p<0) p=testData.get(s)[0]-(testData.get(s)[ix-1]-testData.get(s)[ix]); //happened when inverted autocorr
				if (p<0 || p> 39) continue;
				preds[p]++;
				
				if (p==hits[0] || p==hits[1] || p==hits[2] || p==hits[3] || p==hits[4]){
					text += (", "+p);
					found[p]++;
				}
				
			}
		}
		aWriter.write(text+")"); aWriter.newLine();
		text =" by predictions (";
		int iBet=0;
		int iBest=0;
		found_count=0;
		for (int ip=1; ip<40; ip++){
			if (preds[ip]<2) continue;
			if (found[ip] > 0)found_count++;
			text += (", "+ip+"["+preds[ip]+"],");
			if (preds[ip] > iBest){
				iBest = preds[ip];
				iBet=ip;
			}
		}
		aWriter.write(text+")"); aWriter.newLine();
		aWriter.write("-- hit ("+found_count+")----------- "+iBet+"["+iBest+"]-----"); aWriter.newLine();
		//if (i % 8 == 0) aWriter.newLine();
		if (found_count > 0)
			found_ratio[found_count]++;
	}
	String text=" found ratio ";
	for (int i=0; i<found_ratio.length; i++){
		text += (", "+i+"["+found_ratio[i]+"]");
	}
	aWriter.write(text+")");
	aWriter.newLine();
	
	aWriter.close();
} catch (IOException e) {
	// TODO Auto-generated catch block
	e.printStackTrace();
}
	
	
} 

static int[][] scanForFit(Vector<int[]> refData, int[] testData)
{
	System.out.println("Testing  (");
	for (int i=0; i<testData.length; i++){
	System.out.print(""+testData[i]+", ");
	}
	System.out.print(")");
	int length=refData.get(0).length;
	int[][] foundData=new int[5][length];	
	int[] idx=new int[5];
	Arrays.fill(idx, 0);
	int[] iMin=new int[5];
	Arrays.fill(iMin, 99);
	int[] difV=new int[length];
	difV[0]=0;
	int iGot=0;
	for (int i=1; i<length; i++){
		int iDif=0;
		for (int k=0; k<5; k++){
			iDif += Math.abs(refData.get(k)[i]-testData[k]);
		}
		difV[i]=iDif;
		int iRep=4;
		while (iRep > -1){
			if (iDif > iMin[iRep]) break;
				iRep--; 	
		}
		if (iRep < 4) {			
			for (int k=3; k>iRep; k--){
				iMin[k+1]=iMin[k];
			}
			iMin[iRep+1]=iDif;
		}
		//if (iDif < 5){
			//foundData[iDif][idx[iDif]++]=i;
		//}		
	}
	for (int i=1; i<length; i++){
		if (difV[i] > iMin[4]) continue;
		int k=4;
		while (k>-1){
			if (difV[i] == iMin[k]) break;
		    k--;
		}
		System.out.println("Found "+k+"th min "+iMin[k]+" at "+i+" (");
		for (int ix=0; ix<5; ix++){
			System.out.print(""+refData.get(ix)[i]+", ");
		}
		System.out.print(") and prediction (");
		for (int ix=0; ix<5; ix++){
			System.out.print(""+refData.get(ix)[i-1]+", ");
		}
		System.out.println(") ");
	}
	
	return foundData;
}

static double[] getCoeff(MyMatrix dMtx, int startFrom, int range, int[] refD){
	double[] retC=new double[range];
	for (int i=startFrom; i<startFrom+range; i++){
		retC[i-startFrom]=refD[i];
	}
	
	return dMtx.multiply(retC);
}

static double[] getCoeff(MyMatrix dMtx, int startFrom, int range, double[] refD){
	double[] retC=new double[range];
	System.arraycopy(refD, startFrom, retC, 0, range);
	return dMtx.multiply(retC);
}

static MyMatrix getSinValuesMatrix(int startFrom, int range){
	double[] data=new double[range*range];
	Vector<double[]> retV=new Vector<double[]>();
	double baseT=(2.0*22)/(7.0*40);
	int k=0;
	for (int x=startFrom; x<startFrom+range; x++){
		for (int i=1; i<range+1; i++){
			double rad=x*baseT*i;
			data[k++]=Math.sin(rad);
		}
		retV.add(data);
	}
	return new MyMatrix(retV);
}

//end of program
/*
The Taylor series expansion of sin(x) is

sin(x) = x - (x^3)/3! + (x^5)/5! - (x^7)/7! + ...

If we divide this by x, we can obtain a power series expansion for sin(x)/x:

sin(x)/x = 1 - (x^2)/3! + (x^4)/5! - (x^6)/7!+ ...

Integrating each term of the series gives you an infinite series 
for the integral of sin(x)/x:

∫ sin(x)/x dx = x - (x^3)/(3*3!) + (x^5)/(5*5!) - (x^7)/(7*7!) + ... + C

If we truncate this series after at least four terms 
we can obtain pretty good approximation formula 
for the antiderivative of sin(x)/x. 
The more terms are included, the more accurate the approximation will be 
since this is a convergent power series.
 We can now use this formula to estimate the area under the 
 curve y = sin(x)/x in the following example.
*/

static double sincIntegral(double x)
{
	double sincX=x;
	double term=1;
	int k=1;
	while (term > 0.00001){
		for (int j=1; j<2*(k+1); j++) term *= (x/j);
		term /=(2*k+1);
		double m=1;
		if (k % 2==1) m = (-1);
		sincX += (m*term);
		k++;
	}
	return sincX;
}

static double[] sinc40PI=new double[60];
static double myPI=Math.PI;

double getMeanRatio(double[] inData){
	int iLen=inData.length;
	
	 double meanRatio=0;
	 
	 for (int i=0; i<iLen; i++){
		 double conv=0;
		 for (int k=1; k<6+1; k++){
			 //if (i+k<1) continue;
			 if (i+k > iLen-1) break;
			 int t=i+(int)((k-1)/sqz);
			 if (t > iLen-1) break;
			 conv += sinc40PI[Math.abs(k)]*inData[i+(int)((k-1)/sqz)]*2/myPI;
		 }
		 for (int k=1; k<6+1; k++){
			 if (i- k<0) break;
			 int t=i-(int)(k/sqz);
			 if (t<0) break;
			 //if (i+k > iLen) break;
			 conv += sinc40PI[Math.abs(k)]*inData[i-(int)(k/sqz)]*2/myPI;
		 }
		 //conv /= 2.1174;
		 //newData[i]=(int)Math.round(conv);
		 //double diff=conv-sampled.get(s)[i];
		 double ratio=Math.abs(conv)/inData[i];
		 
		 meanRatio += ratio;
			 //System.out.println("orignal line "+s+" at "+i+" has "+dF.format(conv)+", sampled :"+sampled.get(s)[i]);
	 }
	 
	 meanRatio /= iLen;
	 return meanRatio;
}

static double getMeanRatio(int[] inData){
	int iLen=inData.length;
	
	 double meanRatio=0;
	 
	 for (int i=0; i<iLen; i++){
		 double conv=0;
		 for (int k=1; k<6+1; k++){
			 //if (i+k<1) continue;
			 if (i+k > iLen-1) break;
			 int t=i+(int)((k-1)/sqz);
			 if (t > iLen-1) break;
			 conv += sinc40PI[Math.abs(k)]*inData[i+(int)((k-1)/sqz)]*2/myPI;
		 }
		 for (int k=1; k<6+1; k++){
			 if (i- k<0) break;
			 int t=i-(int)(k/sqz);
			 if (t<0) break;
			 //if (i+k > iLen) break;
			 conv += sinc40PI[Math.abs(k)]*inData[i-(int)(k/sqz)]*2/myPI;
		 }
		 //conv /= 2.1174;
		 //newData[i]=(int)Math.round(conv);
		 //double diff=conv-sampled.get(s)[i];
		 double ratio=Math.abs(conv)/inData[i];
		 
		 meanRatio += ratio;
			 //System.out.println("orignal line "+s+" at "+i+" has "+dF.format(conv)+", sampled :"+sampled.get(s)[i]);
	 }
	 
	 meanRatio /= iLen;
	 return meanRatio;
}

static Vector<int[]> filterOutSample( Vector<int[]> sampled){
	int iLen=sampled.get(0).length;
	double pi=Math.PI;
	 Vector<int[]> retV=new  Vector<int[]>();
	 int[] newData=new int[iLen];
	 BufferedWriter aWriter;
	 String fileName="C:\\Users\\eric\\workspace\\GetLottery\\539\\filterLog.txt";
	 try {
			aWriter=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(fileName)));	

	 for (int s=0; s<5; s++){
		 String good1="orignal line fits at ";
		 int iBnd=sampled.get(s).length-1;
		 int iWas=0;
		 double meanDiff=0;
		 double meanRatio=0;
		 Arrays.fill(newData, 0);
		 for (int i=0; i<iLen; i++){
			 double conv=0;
			 for (int k=1; k<6+1; k++){
				 //if (i+k<1) continue;
				 if (i+k > iLen) break;
				 int t=i+(int)((k-1)/sqz);
				 if (t > iBnd) break;
				 conv += sinc40PI[Math.abs(k)]*sampled.get(s)[i+(int)((k-1)/sqz)]*2/pi;
			 }
			 for (int k=1; k<6+1; k++){
				 if (i- k<0) break;
				 int t=i-(int)(k/sqz);
				 if (t<0) break;
				 //if (i+k > iLen) break;
				 conv += sinc40PI[Math.abs(k)]*sampled.get(s)[i-(int)(k/sqz)]*2/pi;
			 }
			 conv /= 2.1174;
			 newData[i]=(int)Math.round(conv);
			 double diff=conv-sampled.get(s)[i];
			 double ratio=Math.abs(conv)/sampled.get(s)[i];
			 if (Math.abs(diff)>0.5){
				 aWriter.write("orignal line "+s+" at "+i+" has "+dF.format(conv)+", sampled :"+sampled.get(s)[i]);
					aWriter.newLine();
			 }
			 else
			 {
				 good1 += (""+i+"/("+(i-iWas)+"), ");
				 iWas=i;
			 }
			 meanDiff += diff;
			 meanRatio += ratio;
				 //System.out.println("orignal line "+s+" at "+i+" has "+dF.format(conv)+", sampled :"+sampled.get(s)[i]);
		 }
		 meanDiff /= iLen;
		 meanRatio /= iLen;
		 retV.add(Arrays.copyOf(newData, iLen));
		 aWriter.write("平均比 "+meanRatio+good1);aWriter.newLine();
	 }
		aWriter.close();
	}  catch (IOException e){
		return null;
	} 
	 return retV;
}

static double sqz=1;
static int checkCount=3;

static Vector<int[]> refineFound( Vector<int[]> sampled, String fname){
	int iLen=sampled.get(0).length;
	double pi=Math.PI;
	 Vector<int[]> retV=new  Vector<int[]>();
	 int[] newData=new int[40];
	 int checkFrom=36;
	 double ratio;//=getMeanRatio(Arrays.copyOfRange(sampled.get(0), iLen-checkFrom, iLen));
	 //ratio += getMeanRatio(Arrays.copyOfRange(sampled.get(0), iLen-checkFrom, iLen));
	 //ratio += getMeanRatio(Arrays.copyOfRange(sampled.get(0), iLen-checkFrom, iLen));
	// ratio += getMeanRatio(Arrays.copyOfRange(sampled.get(0), iLen-checkFrom, iLen));
	 //ratio += getMeanRatio(Arrays.copyOfRange(sampled.get(0), iLen-checkFrom, iLen));
	 //ratio /= 5;
	 //double[setType][sqz][reTryPoint]
	 //double[][][] dtStart={{9, -3, -1, -1, -1}, {-4, 5, 1, 1, 1}} ;
	 double[][][] dtCenter={{{0.04, 0.06, 0, 0.06, 0.16}, {0.08, 0.04, -0.04, -0.02, -0.04 }},
			 {{0.18, 0.02, 0.02, 0, 0.02}, {-0.04, -0.06, 0, 0.02, 0.02}}
	 } ;
	 //double[][] dtEnd={{11, -1, 1, 1, 1},  {-2, 7, 3, 3, 3}};
	 double dtDelta=0.002;
	 
	 int selected=((int)sqz % 2);
	 BufferedWriter aWriter;
	 String fileName="C:\\Users\\eric\\workspace\\GetLottery\\539\\"+fname+checkCount+".txt";
	 try {
			aWriter=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(fileName)));	

	 for (int s=0; s<5; s++){
		 aWriter.write("****************Checking line "+s);aWriter.newLine();
		 String good1="try line "+s+" fits at ";
		 ratio=getMeanRatio(Arrays.copyOfRange(sampled.get(s), iLen-checkFrom, iLen));
		 Arrays.fill(newData, 0);
		 for (int i=0; i<35; i++){
			 newData[i]=sampled.get(s)[iLen-35+i];
		 }
		 double diff2=2000;
		 double[] diff3=new double[3];
		 diff3[2]=0;
		 diff3[1]=10;
		 diff3[0]=10;
		 int[] diffAt=new int[4];
		 //double nRatio=ratio*0.8;
		 //for (int dt=-5; dt<6; dt++)
		 double rdt=dtCenter[setType][selected][s]-10*dtDelta;
		 double bestRatio=1.2;
		 double bestDt=0;
		 rdt=-0.2;
		 boolean fixDt=false;
		 /*
		 if (setType==0 && s==3 && sqz==3){
			 fixDt=true;
			 rdt=-0.06;
		 }
		 if (setType==1 && s==2 && sqz==3){
			 fixDt=true;
			 rdt=0.00;
		 }
		 */
		 int iTry=0;
		 while (diff2>0.01)
		 { 
			 if (fixDt && iTry > 0) break;
			 if (!fixDt) rdt += dtDelta;
			 if (iTry > 20) 
				 break;
			 double nRatio=ratio*(1+rdt);
			 iTry++;
			 //System.out.println("Line "+s+" use ratio "+nRatio);
		 for (int n4=1+s; n4<36+s; n4++){
			 newData[38]=n4;
			 for (int n3=1+s; n3<36+s; n3++){
				 newData[37]=n3;
				 for (int n2=1+s; n2<36+s; n2++){
					 newData[36]=n2;
					 
		 for (int n1=1+s; n1<36+s; n1++){
			 newData[35]=n1;
			  
			 double[] diffS=new double[3];
		 for (int ix=0; ix<checkCount; ix++){
			 int i=ix+36-checkCount;
			 double conv=0;
			 for (int k=1; k<6+1; k++){
				 //if (i+k<1) continue;
				 int t=i+(int)((k-1)/sqz);
				 if (t > newData.length-1) break;
				 //if (i+k >39) break;
				 conv += sinc40PI[Math.abs(k)]*newData[i+(int)((k-1)/sqz)]*2/pi;
			 }
			 for (int k=1; k<6+1; k++){
				 if (i- k < 0) break;
				 int t=i-(int)(k/sqz);
				 if (t<0) break;
				 //if (i+k > iLen) break;
				 conv += sinc40PI[Math.abs(k)]*newData[i-(int)(k/sqz)]*2/pi;
			 }
			 conv /= nRatio;//ratio;//1.795;//2.1174;//
			 //newData[i]=(int)Math.round(conv);
			 diffS[ix]=Math.abs(conv-newData[i]);
			 //double ratio=Math.abs(conv)/sampled.get(s)[i];
		 }
		 
		 double tDiff=0;
		 for (int c=0; c<checkCount; c++)
		 {
		 	tDiff += diffS[c];
		 }
		 
		 if (tDiff<0.005){
			 aWriter.write("fit AT:("+n1+","+n2+","+n3+","+n4+") with "+diffS[0]+" and "+diffS[1]);
			 aWriter.newLine(); 
		 } 
		 if (tDiff < diff2){
			 diff2=tDiff;
			 diff3[0]=diffS[0];
			 diff3[1]=diffS[1];
			 diff3[2]=diffS[2];
			 diffAt[0]=n1;
			 diffAt[1]=n2;
			 diffAt[2]=n3;
			 diffAt[3]=n4;
			 bestRatio=nRatio;
			 bestDt=nRatio/ratio;

		 }
					 }
				 }
			 }
		 }
		 }
		 //meanDiff /= iLen;
		 //meanRatio /= iLen;
		 retV.add(Arrays.copyOf(newData, iLen));
		 good1 += "("+diffAt[0]+","+diffAt[1]+","+diffAt[2]+","+diffAt[3]+")";
		 good1 += " with diff="+dF.format(diff2);
		 good1 += " has a="+dF.format(diff3[0])+" b="+dF.format(diff3[1])+" c="+dF.format(diff3[2]);
		 aWriter.write(good1+")"+bestRatio+"; n="+bestDt);aWriter.newLine();
	 }
		aWriter.close();
	}  catch (IOException e){
		return null;
	} 
	 return retV;
}
static int[] checkBackFit( Vector<int[]> sampled, String fname){
	int iLen=sampled.get(0).length;
	double pi=Math.PI;
	 Vector<int[]> retV=new  Vector<int[]>();
	 int[] bestFitPoints=new int[5];
	 int[] newData=new int[40];
	 int checkFrom=36;
	 double ratio;//=getMeanRatio(Arrays.copyOfRange(sampled.get(0), iLen-checkFrom, iLen));
	 //ratio += getMeanRatio(Arrays.copyOfRange(sampled.get(0), iLen-checkFrom, iLen));
	 //ratio += getMeanRatio(Arrays.copyOfRange(sampled.get(0), iLen-checkFrom, iLen));
	// ratio += getMeanRatio(Arrays.copyOfRange(sampled.get(0), iLen-checkFrom, iLen));
	 //ratio += getMeanRatio(Arrays.copyOfRange(sampled.get(0), iLen-checkFrom, iLen));
	 //ratio /= 5;
	 //double[setType][sqz][reTryPoint]
	 //double[][][] dtStart={{9, -3, -1, -1, -1}, {-4, 5, 1, 1, 1}} ;
	 double[][][] dtCenter={{{0.04, 0.06, 0, 0.06, 0.16}, {0.08, 0.04, -0.18, -0.06, -0.18 }},
			 {{0.18, 0.02, 0.02, 0, 0.02}, {-0.18, -0.06, 0, 0, 0.02}}
	 } ;
	 //double[][] dtEnd={{11, -1, 1, 1, 1},  {-2, 7, 3, 3, 3}};
	 double dtDelta=0.02;
	 
	 
	 int selected=((int)sqz % 2);
	 BufferedWriter aWriter;
	 String fileName="C:\\Users\\eric\\workspace\\GetLottery\\539\\"+fname+checkCount+".txt";
	  {
			//aWriter=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(fileName)));	

	 for (int s=0; s<5; s++){
		// aWriter.write("****************Checking line "+s);aWriter.newLine();
		 String good1="try line "+s+" fits at ";
		 ratio=getMeanRatio(Arrays.copyOfRange(sampled.get(s), iLen-checkFrom, iLen));
		 Arrays.fill(newData, 0);
		 for (int i=0; i<35; i++){
			 newData[i]=sampled.get(s)[iLen-35+i];
		 }
		 double diff2=2000;
		 double[] diff3=new double[3];
		 diff3[2]=0;
		 diff3[1]=10;
		 diff3[0]=10;
		 int[] diffAt=new int[4];
		 //double nRatio=ratio*0.8;
		 //for (int dt=-5; dt<6; dt++)
		 double rdt=dtCenter[setType][selected][s]-10*dtDelta;
		 double bestRatio=1.2;
		 double bestDt=0;
		 rdt=-0.2;
		 boolean fixDt=false;
		 if (setType==0 && s==3 && sqz==3){
			 fixDt=true;
			 rdt=-0.06;
		 }
		 if (setType==1 && s==2 && sqz==3){
			 fixDt=true;
			 rdt=0.00;
		 }
		 int iTry=0;
		 rdt=-0.02*10;
		 while (diff2>0.01)
		 { 
			 //if (fixDt && iTry > 0) break;
			 //if (!fixDt) 
			 rdt += dtDelta;
			 if (iTry > 20) 
				 break;
			 double nRatio=ratio*(1+rdt);
			 iTry++;
			 //System.out.println("Line "+s+" use ratio "+nRatio);
		 for (int n4=1+s; n4<36+s; n4++){
			 newData[38]=n4;
			 for (int n3=1+s; n3<36+s; n3++){
				 newData[37]=n3;
				 for (int n2=1+s; n2<36+s; n2++){
					 newData[36]=n2;
					 
		 for (int n1=1+s; n1<36+s; n1++){
			 newData[35]=n1;
			  
			 double[] diffS=new double[3];
		 for (int ix=0; ix<checkCount; ix++){
			 int i=ix+36-checkCount;
			 double conv=0;
			 for (int k=1; k<6+1; k++){
				 //if (i+k<1) continue;
				 int t=i+(int)((k-1)/sqz);
				 if (t > newData.length-1) break;
				 //if (i+k >39) break;
				 conv += sinc40PI[Math.abs(k)]*newData[i+(int)((k-1)/sqz)]*2/pi;
			 }
			 for (int k=1; k<6+1; k++){
				 if (i- k < 0) break;
				 int t=i-(int)(k/sqz);
				 if (t<0) break;
				 //if (i+k > iLen) break;
				 conv += sinc40PI[Math.abs(k)]*newData[i-(int)(k/sqz)]*2/pi;
			 }
			 conv /= nRatio;//ratio;//1.795;//2.1174;//
			 //newData[i]=(int)Math.round(conv);
			 diffS[ix]=Math.abs(conv-newData[i]);
			 //double ratio=Math.abs(conv)/sampled.get(s)[i];
		 }
		 
		 double tDiff=0;
		 for (int c=0; c<checkCount; c++)
		 {
		 	tDiff += diffS[c];
		 }
		 if (tDiff<0.005){
			 //aWriter.write("fit AT:("+n1+","+n2+","+n3+","+n4+") with "+diffS[0]+" and "+diffS[1]);
			 //aWriter.newLine(); 
		 } 
		 if (tDiff < diff2){
			 diff2=tDiff;
			 diff3[0]=diffS[0];
			 diff3[1]=diffS[1];
			 diff3[2]=diffS[2];
			 diffAt[0]=n1;
			 diffAt[1]=n2;
			 diffAt[2]=n3;
			 diffAt[3]=n4;
			 bestRatio=nRatio;
			 bestDt=nRatio/ratio;

		 }
					 }
				 }
			 }
		 }
		 }
		 //meanDiff /= iLen;
		 //meanRatio /= iLen;
		 retV.add(Arrays.copyOf(newData, iLen));
		 good1 += "("+diffAt[0]+","+diffAt[1]+","+diffAt[2]+","+diffAt[3]+")";
		 good1 += " with diff="+dF.format(diff2);
		 good1 += " has a="+dF.format(diff3[0])+" b="+dF.format(diff3[1])+" c="+dF.format(diff3[2]);
		 //aWriter.write(good1+")"+bestRatio+"; n="+bestDt);aWriter.newLine();
		 bestFitPoints[s]=diffAt[0];
	 }
		//aWriter.close();
	} 
	 return bestFitPoints;//retV;
}
int expandedBy;
int useSincRange;
int checkPositionStart;
static double[] expandSeries(int byFactor, double[] newData)
{
	int iLen=newData.length;
	 
	//double pi=Math.PI;
	 double[] retV=new  double[iLen];
	 
		 double[] newSet=new double[(iLen-1)*byFactor+1];
		 Arrays.fill(newSet, 0);
		 int iC=0;
		 for (int i=0; i<iLen-1; i++){
			 
			 double delta = (newData[i+1]-newData[i]);
			 delta /= byFactor;
			 for (int x=0; x<byFactor; x++){
				 newSet[i*byFactor+x]=newData[i]+x*delta;
				 iC++;
			 }
			 
		 }
		 newSet[iC]=newData[iLen-1];
			 
	 return newSet;
}


static Vector<double[]> expandSeries(int byFactor, Vector<int[]> orgData)
{
	
	//double pi=Math.PI;
	 Vector<double[]> retV=new  Vector<double[]>();
	 for (int s=0; s<orgData.size(); s++){
		 int iLen=orgData.get(s).length;
		 double[] newSet=new double[(iLen-1)*byFactor+1];
		 Arrays.fill(newSet, 0);
		 int iC=0;
		 for (int i=0; i<orgData.get(s).length-1; i++){
			 
			 double delta = (orgData.get(s)[i+1]-orgData.get(s)[i]);
			 delta /= byFactor;
			 for (int x=0; x<byFactor; x++){
				 newSet[i*byFactor+x]=orgData.get(s)[i]+x*delta;
				 iC++;
			 }
			 
		 }
		 newSet[iC]=orgData.get(s)[iLen-1];
		 retV.add(newSet);
	 }
	 
	 return retV;
}
int[] tryExpanedSample(int byFactor, Vector<int[]> oldSample, String fname){
	Vector<double[]> sampled=expandSeries(byFactor,oldSample);
	int iLen=sampled.get(0).length;
	double pi=Math.PI;
	 Vector<int[]> retV=new  Vector<int[]>();
	 int[] bestFitPoints=new int[5];
	 int orgCheckLen=36;
	  int checkLen=orgCheckLen*byFactor;
	 double ratio;//=getMeanRatio(Arrays.copyOfRange(sampled.get(0), iLen-checkFrom, iLen));
	 //ratio += getMeanRatio(Arrays.copyOfRange(sampled.get(0), iLen-checkFrom, iLen));
	 //ratio += getMeanRatio(Arrays.copyOfRange(sampled.get(0), iLen-checkFrom, iLen));
	// ratio += getMeanRatio(Arrays.copyOfRange(sampled.get(0), iLen-checkFrom, iLen));
	 //ratio += getMeanRatio(Arrays.copyOfRange(sampled.get(0), iLen-checkFrom, iLen));
	 //ratio /= 5;
	 //double[setType][sqz][reTryPoint]
	 //double[][][] dtStart={{9, -3, -1, -1, -1}, {-4, 5, 1, 1, 1}} ;
	 double[][][] dtCenter={{{0.04, 0.06, 0, 0.06, 0.16}, {0.08, 0.04, -0.18, -0.06, -0.18 }},
			 {{0.18, 0.02, 0.02, 0, 0.02}, {-0.18, -0.06, 0, 0, 0.02}}
	 } ;
	 //double[][] dtEnd={{11, -1, 1, 1, 1},  {-2, 7, 3, 3, 3}};
	 double dtDelta=0.01;
	 	 
	 int selected=((int)sqz % 2);
	 //BufferedWriter aWriter;
	 //String fileName="for"+JackPotReader.drawDate+fname+checkCount+".txt";
	 //try {
			//aWriter=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(fileName)));	

	 for (int s=0; s<5; s++){
		 //aWriter.write("****************Checking line "+s);aWriter.newLine();
		 String good1="try line "+s+" fits at ";
		 ratio=getMeanRatio(Arrays.copyOfRange(sampled.get(s), iLen-checkLen, iLen));
		 double[] newData=new double[checkLen+4*byFactor];
			Arrays.fill(newData, 0);
		 for (int i=0; i<checkLen; i++){
			 newData[i]=sampled.get(s)[iLen-checkLen+i];
		 }
		 double diff2=200000;
		 double[] diff3=new double[3];
		 diff3[2]=0;
		 diff3[1]=10;
		 diff3[0]=10;
		 int[] diffAt=new int[4];
		 //double nRatio=ratio*0.8;
		 //for (int dt=-5; dt<6; dt++)
		 double rdt=dtCenter[setType][selected][s]-10*dtDelta;
		 double bestRatio=1.2;
		 double bestDt=0;
		 rdt=-0.2;
		 
		 int iTry=0;
		 //rdt=-0.02*10;
		 while (diff2>0.01)
		 { 
			 
			 rdt += dtDelta;
			 if (iTry > 40) 
				 break;
			 double nRatio=ratio*(1+rdt);
			 iTry++;
			 //System.out.println("Line "+s+" use ratio "+nRatio);
		 for (int n4=1+s; n4<36+s; n4++){
			 //newData[38]=n4;
			 //newData[38*byFactor]=n4;
			 double delta=(20 -n4)/byFactor;
			 for (int p=0; p<byFactor; p++){
				  newData[38*byFactor+p]=n4+p*delta;
			  }
			 for (int n3=1+s; n3<36+s; n3++){
				 //newData[37]=n3;
				 //newData[37*byFactor]=n3;
				 delta=(n4-n3)/byFactor;
				 for (int p=0; p<byFactor; p++){
					  newData[37*byFactor+p]=n3+p*delta;
				  }
				 for (int n2=1+s; n2<36+s; n2++){
					 //newData[36*byFactor]=n2;
					 delta=(n3-n2)/byFactor;
					 for (int p=0; p<byFactor; p++){
						  newData[36*byFactor+p]=n2+p*delta;
					  }
					 
		 for (int n1=1+s; n1<36+s; n1++){
			 //newData[35*byFactor]=n1;
			 delta=(n2-n1)/byFactor;
			 for (int p=0; p<byFactor; p++){
				  newData[35*byFactor+p]=n1+p*delta;
			  }
			 delta=(n1-newData[34*byFactor])/byFactor;
			  for (int p=1; p<byFactor; p++){
				  newData[33*byFactor+p]=newData[34*byFactor]+p*delta;
			  }
			 double[] diffS=new double[3];
		 for (int ix=0; ix<checkCount; ix++){
			 int i=ix+36-checkCount;
			 int pos=i*byFactor;
			 double conv=0;
			 int chkBnd=3*byFactor;
			 for (int k=1; k<chkBnd+1; k++){
				 //if (i+k<1) continue;
				 int t=pos+(int)((k-1)/sqz);
				 if (t > newData.length-1) break;
				 //if (i+k >39) break;
				 conv += sinc40PI[Math.abs(k)]*newData[pos+(int)((k-1)/sqz)]*2/pi;
			 }
			 for (int k=1; k<chkBnd+1; k++){
				 if (pos - k < 0) break;
				 int t=pos-(int)(k/sqz);
				 if (t<0) break;
				 //if (i+k > iLen) break;
				 conv += sinc40PI[Math.abs(k)]*newData[pos-(int)(k/sqz)]*2/pi;
			 }
			 conv /= nRatio;//ratio;//1.795;//2.1174;//
			 //newData[i]=(int)Math.round(conv);
			 diffS[ix]=Math.abs(conv-newData[pos]);
			 //double ratio=Math.abs(conv)/sampled.get(s)[i];
		 }
		 
		 double tDiff=0;
		 for (int c=0; c<checkCount; c++)
		 {
		 	tDiff += diffS[c];
		 }
		 if (tDiff<0.005){
			 //aWriter.write("fit AT:("+n1+","+n2+","+n3+","+n4+") with "+diffS[0]+" and "+diffS[1]);
			 //aWriter.newLine(); 
		 } 
		 if (tDiff < diff2){
			 diff2=tDiff;
			 diff3[0]=diffS[0];
			 diff3[1]=diffS[1];
			 diff3[2]=diffS[2];
			 diffAt[0]=n1;
			 diffAt[1]=n2;
			 diffAt[2]=n3;
			 diffAt[3]=n4;
			 bestRatio=nRatio;
			 bestDt=nRatio/ratio;

		 }
					 }
				 }
			 }
		 }
		 }
		 
		 //good1 += "("+diffAt[0]+","+diffAt[1]+","+diffAt[2]+","+diffAt[3]+")";
		 //good1 += " with diff="+dF.format(diff2);
		 //good1 += " has a="+dF.format(diff3[0])+" b="+dF.format(diff3[1])+" c="+dF.format(diff3[2]);
		 //aWriter.write(good1+")"+bestRatio+"; n="+bestDt);aWriter.newLine();
		 bestFitPoints[s]=diffAt[0];
	 }
		//aWriter.close();
	//} 
	 return bestFitPoints;//retV;
}

double convolBySinc(int n, int range1, double[] newData){
	//mx+b
	//m=(f[n+1]-f[n])
	//b=(n+1)*f(n)-n*f(n+1)
	int range=54;
	int uBnd=newData.length-1;
	double retV=0;
	double forward=0;
	for (int i=0; i<range; i++){
		if (n+i>uBnd || i > 54) break;
		forward += newData[n+i]*sinc40PI[i+1];
	}
	if (n<uBnd)
	for (int i=1; i<range; i++){
		if (n-i<0 || i > 54) break;
		forward += newData[n-i]*sinc40PI[i];
	}
	return forward;
}

int fineTuneTrianglePrediction(int s, int[] oldSample, double variableRatio, int expandFactor, int sincRange, int pWas, double vWas){
	int iLen=oldSample.length;
	int checkLen=35;
		 double[] newData=new double[40];
			Arrays.fill(newData, 0);
		 for (int i=0; i<checkLen; i++){
			 newData[i]=oldSample[iLen-checkLen+i];
		 }
		 double diff2=200000;
		 double[] diff3=new double[3];
		 diff3[2]=0;
		 diff3[1]=10;
		 diff3[0]=10;
		 int[] diffAt=new int[4];
		 //double nRatio=ratio*0.8;
		 //for (int dt=-5; dt<6; dt++)
		 double bestRatio=1.2;
		 //double bestDt=0;
		// rdt=-0.2;
		 double delta=variableRatio/100;
		 int iTry=0;
		 //rdt=-0.02*10;
		 //int expandFactor=1;
		 //int sincRange=expandFactor*2;
		 int bestFactor=0;
		 int bestRange=0;
		 double rdt=variableRatio-10*delta;
		 
		 while (diff2>0.01)
		 { 
			 
			 sincRange=expandFactor*2;
			 
			// rdt += dtDelta;
			 if (iTry > 20) 
				 break;
			// double nRatio=ratio*(1+rdt);
			 iTry++;
			 //System.out.println("Line "+s+" use ratio "+nRatio);
		 for (int n4=1+s; n4<36+s; n4 += 36){//++){
			 newData[38]=20;//n4;			 
			 for (int n3=1+s; n3<36+s; n3++){
				 newData[37]=n3;				 
				 for (int n2=1+s; n2<36+s; n2++){
					 newData[36]=n2;					 
					 for (int n1=1+s; n1<36+s; n1++){
						 newData[35]=n1;
			 
			 double[] testData=expandSeries(expandFactor,newData); 
			 double adj=rdt+delta*iTry;
			 /*
			 int iCC=0;
			 for (int v=testData.length/16; v<testData.length*15/16; v++){
				 double tmp=convolBySinc(v, sincRange, testData);
				 adj += (tmp/testData[v]);
				 iCC++;
			 }
			 adj /= iCC;
			 //adj *= 2;*/
			 double[] diffS=new double[checkCount];
			 for (int ix=0; ix<checkCount; ix++){
				 int i=ix+36-checkCount;
				 int pos=i*expandFactor;
				 double conv=0;
				 
				 conv =convolBySinc(pos, sincRange, testData)/adj;
				 //newData[i]=(int)Math.round(conv);
				 diffS[ix]=Math.abs(conv-testData[pos]);
				 //double ratio=Math.abs(conv)/sampled.get(s)[i];
			 }
		 
		 double tDiff=0;
		 for (int c=0; c<checkCount; c++)
		 {
		 	tDiff += diffS[c];
		 }
		 
		 if (tDiff < diff2){
			 diff2=tDiff;
			 diff3[0]=diffS[0];
			 diff3[1]=diffS[1];
			 diff3[2]=diffS[2];
			 diffAt[0]=(int)Math.round(n1);
			 diffAt[1]=(int)Math.round(n2);;
			 //diffAt[2]=n3;
			 //diffAt[3]=n4;
			 bestRatio=adj;
			 //bestDt=nRatio/ratio;
			 bestFactor=expandFactor;
			 bestRange=sincRange;

		 }
					 }
				}
			 }
		 }
				 //aWriter.write
				 //(good1+")"+bestRatio+"; n="+bestDt);aWriter.newLine();
				 //System.out.println
				 //("Line "+s+" f="+expandFactor+" diff="
						 		//+dF.format(diff2)+" bf="+bestFactor+" range="+bestRange+ " r="+dF.format(bestRatio));	 
				 //System.out.println
				// ("fine tune diff="
						 		//+dF.format(diff2)+" bf="+bestFactor+" range="+bestRange+ " r="+dF.format(bestRatio));	 
				  
		 }
		 //if (diff2 >)
		 //good1 += "("+diffAt[0]+","+diffAt[1]+","+diffAt[2]+","+diffAt[3]+")";
		 //good1 += " with diff="+dF.format(diff2);
		 //good1 += " has a="+dF.format(diff3[0])+" b="+dF.format(diff3[1])+" c="+dF.format(diff3[2]);
		 //aWriter.write
		 //(good1+")"+bestRatio+"; n="+bestDt);aWriter.newLine();
		 //System.out.println
		 //("!!!!Line "+s+" Best fit with diff="
				 		//+dF.format(diff2)+" factor="+bestFactor+" range="+bestRange);
		 //aWriter.newLine();
		 if (diff2 > 0.25) return 0;
		 if (diff2 > vWas) return pWas;
	 return diffAt[0];//retV;
}

static double[] merit_of_solutions=new double[5];
int[] tryTriangleSample(Vector<int[]> oldSample){
	//int byFactor=32;
	//Vector<double[]> sampled=oldSample;//expandSeries(byFactor,oldSample);
	//int iLen=sampled.get(0).length;
	//double pi=Math.PI;
	 //Vector<int[]> retV=new  Vector<int[]>();
	 int[] bestFitPoints=new int[5];
	// int orgCheckLen=36;
	  int checkLen=35;//orgCheckLen*byFactor;
	// double ratio;//=getMeanRatio(Arrays.copyOfRange(sampled.get(0), iLen-checkFrom, iLen));
	 //ratio += getMeanRatio(Arrays.copyOfRange(sampled.get(0), iLen-checkFrom, iLen));
	 //ratio += getMeanRatio(Arrays.copyOfRange(sampled.get(0), iLen-checkFrom, iLen));
	// ratio += getMeanRatio(Arrays.copyOfRange(sampled.get(0), iLen-checkFrom, iLen));
	 //ratio += getMeanRatio(Arrays.copyOfRange(sampled.get(0), iLen-checkFrom, iLen));
	 //ratio /= 5;
	 //double[setType][sqz][reTryPoint]
	 //double[][][] dtStart={{9, -3, -1, -1, -1}, {-4, 5, 1, 1, 1}} ;
	// double[][][] dtCenter={{{0.04, 0.06, 0, 0.06, 0.16}, {0.08, 0.04, -0.18, -0.06, -0.18 }},
			// {{0.18, 0.02, 0.02, 0, 0.02}, {-0.18, -0.06, 0, 0, 0.02}}
	// } ;
	 //double[][] dtEnd={{11, -1, 1, 1, 1},  {-2, 7, 3, 3, 3}};
	 //double dtDelta=0.01;
	 	 
	// int selected=((int)sqz % 2);
	 //BufferedWriter aWriter;
	 //String fileName="tryExpandLog"+JackPotReader.drawDate+".txt";
	 
	 for (int s=0; s<5; s++){
		 //aWriter.write("****************Checking line "+s);aWriter.newLine();
		 //String good1="try line "+s+" fits at ";
		 //ratio=getMeanRatio(Arrays.copyOfRange(sampled.get(s), iLen-checkLen, iLen));
		 int iLen=oldSample.get(s).length;
		 double[] newData=new double[checkLen+4];
			Arrays.fill(newData, 0);
		 for (int i=0; i<checkLen; i++){
			 newData[i]=oldSample.get(s)[iLen-checkLen+i];
		 }
		 
		 int expandFactor=expandedBy;//8;
		 double[] testData1=expandSeries(expandFactor,newData); 
		 double adj1=0;
		 int iCC=0;
		 for (int v=checkLen-checkCount; v<checkLen; v++){
			 int pos=v*expandFactor;
			 double tmp=convolBySinc(v, 54, testData1);
			 adj1 +=(tmp/testData1[v]);
			 iCC++;
		 }
		 adj1 /= iCC;
		 double adj=0;
		 for (int v=checkLen-checkCount; v<checkLen; v++){
			 int pos=v*expandFactor;
			 double tmp=convolBySinc(v, 54, testData1);
			 adj +=(tmp/adj1 - testData1[v]);
			 //iCC++;
		 }
		 adj /= iCC;
		 double diff2=200000;
		 double[] diff3=new double[4];
		 diff3[2]=0;
		 diff3[1]=10;
		 diff3[0]=10;
		 int[] diffAt=new int[4];
		 //double nRatio=ratio*0.8;
		 //for (int dt=-5; dt<6; dt++)
		 //double rdt=dtCenter[setType][selected][s]-10*dtDelta;
		 double bestRatio=1.2;
		 //double bestDt=0;
		// rdt=-0.2;
		 
		 int iTry=0;
		 //rdt=-0.02*10;
		 
		 int sincRange=54;//expandFactor*2;
		 int bestFactor=0;
		 int bestRange=0;
		 //expandFactor = 1;
		 boolean bFound=false;
		// while (diff2>0.1 && expandFactor<7 && !bFound)
		 //{ 
			 //expandFactor += 1;
			 sincRange=54;//expandFactor*2;
			 
			// rdt += dtDelta;
			 //if (iTry > 40) 
				// break;
			// double nRatio=ratio*(1+rdt);
			 iTry++;
			 //System.out.println("Line "+s+" use ratio "+nRatio);
			 for (int n4=1; n4<40 && !bFound; n4 ++){//n4++){
				 newData[38]=n4;			 
				 for (int n3=1; n3<40 && !bFound; n3++){
					 newData[37]=n3;				 
					 for (int n2=1; n2<40 && !bFound; n2++){
						 newData[36]=n2;					 
						 for (int n1=1; n1<40 && !bFound; n1++){
							 newData[35]=n1;
			 
			 double[] testData=expandSeries(expandFactor,newData); 
			 //double adj=0;
			 /*
			 int iCC=0;
			 for (int v=testData.length/36; v<testData.length*35/36; v++){
				 double tmp=convolBySinc(v, sincRange, testData);
				 adj += (tmp/testData[v]);
				 iCC++;
			 }
			 adj /= iCC;
			 */
			 //adj *= 2;
			 double[] diffS=new double[checkCount];
			 for (int ix=0; ix<checkCount; ix++){
				 int i=ix+36-checkCount;
				 int pos=i*expandFactor;
				 double conv=0;
				 
				 conv =convolBySinc(pos, sincRange, testData)/adj1;// - adj;///adj;
				 //newData[i]=(int)Math.round(conv);
				 diffS[ix]=Math.abs(conv-(testData[pos]+adj));
				 //double ratio=Math.abs(conv)/sampled.get(s)[i];
			 }
		 
		 double tDiff=0;
		 for (int c=0; c<checkCount; c++)
		 {
		 	tDiff += diffS[c];
		 }
		 tDiff /= checkCount;
		 
		 if (tDiff < diff2){
			 diff2=tDiff;
			 diff3[0]=diffS[0];
			 diff3[1]=diffS[1];
			 //diff3[2]=diffS[2];
			 diffAt[0]=(int)Math.round(n1);
			 diffAt[1]=(int)Math.round(n2);;
			 //diffAt[2]=n3;
			 //diffAt[3]=n4;
			 bestRatio=adj;
			 //bestDt=nRatio/ratio;
			 bestFactor=expandFactor;
			 bestRange=sincRange;

		 }
		 if (tDiff<0.05){
			 //aWriter.write("fit AT:("+n1+","+n2+","+n3+","+n4+") with "+diffS[0]+" and "+diffS[1]);
			 //aWriter.newLine(); 
			 bFound=true;
			 break;
		} 
					 }
				 }
			 }
		 }
				 
				 System.out.println
				 	("Line "+s+" f="+expandFactor+" diff="
						 		+dF.format(diff2)+" bf="+bestFactor+" range="+bestRange+ " r="+dF.format(bestRatio)+" @"+diffAt[0]);	 
				  
		 //}
		 
		 //good1 += "("+diffAt[0]+","+diffAt[1]+","+diffAt[2]+","+diffAt[3]+")";
		 //good1 += " with diff="+dF.format(diff2);
		 //good1 += " has a="+dF.format(diff3[0])+" b="+dF.format(diff3[1])+" c="+dF.format(diff3[2]);
		
		 //if (diff2 > 0.1) diffAt[0]=fineTuneTrianglePrediction(s, oldSample.get(s), bestRatio, bestFactor, bestRange, diffAt[0], diff2);
		 bestFitPoints[s]=0;
		 if (diff2 < 0.45)// || diffAt[0]!=0)
		 {
			 merit_of_solutions[s]=diff2;
			 bestFitPoints[s]=diffAt[0];
		 }
	 }
		
	 return bestFitPoints;//retV;
}

int[] tryTriangleSample(Vector<int[]> oldSample, String fname){
	int byFactor=32;
	//Vector<double[]> sampled=oldSample;//expandSeries(byFactor,oldSample);
	//int iLen=sampled.get(0).length;
	//double pi=Math.PI;
	 //Vector<int[]> retV=new  Vector<int[]>();
	 int[] bestFitPoints=new int[5];
	// int orgCheckLen=36;
	  int checkLen=35;//orgCheckLen*byFactor;
	// double ratio;//=getMeanRatio(Arrays.copyOfRange(sampled.get(0), iLen-checkFrom, iLen));
	 //ratio += getMeanRatio(Arrays.copyOfRange(sampled.get(0), iLen-checkFrom, iLen));
	 //ratio += getMeanRatio(Arrays.copyOfRange(sampled.get(0), iLen-checkFrom, iLen));
	// ratio += getMeanRatio(Arrays.copyOfRange(sampled.get(0), iLen-checkFrom, iLen));
	 //ratio += getMeanRatio(Arrays.copyOfRange(sampled.get(0), iLen-checkFrom, iLen));
	 //ratio /= 5;
	 //double[setType][sqz][reTryPoint]
	 //double[][][] dtStart={{9, -3, -1, -1, -1}, {-4, 5, 1, 1, 1}} ;
	// double[][][] dtCenter={{{0.04, 0.06, 0, 0.06, 0.16}, {0.08, 0.04, -0.18, -0.06, -0.18 }},
			// {{0.18, 0.02, 0.02, 0, 0.02}, {-0.18, -0.06, 0, 0, 0.02}}
	// } ;
	 //double[][] dtEnd={{11, -1, 1, 1, 1},  {-2, 7, 3, 3, 3}};
	 //double dtDelta=0.01;
	 	 
	// int selected=((int)sqz % 2);
	 BufferedWriter aWriter;
	 String fileName="tryExpandLog"+JackpotReader.drawDate+".txt";
	 try {
			aWriter=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(fileName)));	

	 for (int s=0; s<5; s++){
		 //aWriter.write("****************Checking line "+s);aWriter.newLine();
		 //String good1="try line "+s+" fits at ";
		 //ratio=getMeanRatio(Arrays.copyOfRange(sampled.get(s), iLen-checkLen, iLen));
		 int iLen=oldSample.get(s).length;
		 double[] newData=new double[checkLen+2];
			Arrays.fill(newData, 0);
		 for (int i=0; i<checkLen; i++){
			 newData[i]=oldSample.get(s)[iLen-checkLen+i];
		 }
		 double diff2=200000;
		 double[] diff3=new double[3];
		 diff3[2]=0;
		 diff3[1]=10;
		 diff3[0]=10;
		 int[] diffAt=new int[4];
		 //double nRatio=ratio*0.8;
		 //for (int dt=-5; dt<6; dt++)
		 //double rdt=dtCenter[setType][selected][s]-10*dtDelta;
		 double bestRatio=1.2;
		 //double bestDt=0;
		// rdt=-0.2;
		 double[] tmp=new double[3];
		 for (int im=0; im<3; im++){
			 tmp[im]=0;
			 for (int p=im*10; p<im*10+10; p++){
				 tmp[im]+= newData[p];
			 }
			 tmp[im] /= 10;
		 }
		 int iTry=0;
		 //rdt=-0.02*10;
		 int expandFactor=1;
		 int sincRange=expandFactor*2;
		 int bestFactor=0;
		 int bestRange=0;
		 while (diff2>0.001 && expandFactor<17)
		 { 
			 expandFactor++;
			 sincRange=expandFactor*2;
			 
			// rdt += dtDelta;
			 if (iTry > 40) 
				 break;
			// double nRatio=ratio*(1+rdt);
			 iTry++;
			 //System.out.println("Line "+s+" use ratio "+nRatio);
		 //for (int n4=1+s; n4<36+s; n4++){
			 newData[38]=tmp[0];			 
			 //for (int n3=1+s; n3<36+s; n3++){
				 newData[37]=tmp[1];				 
				 for (int n2=1+s; n2<36+s; n2++){
					 newData[36]=n2;					 
					 for (int n1=1+s; n1<36+s; n1++){
						 newData[35]=n1;
			 
			 double[] testData=expandSeries(expandFactor,newData); 
			 double adj=0;
			 int iCC=0;
			 for (int v=testData.length/16; v<testData.length*15/16; v++){
				 double tmp1=convolBySinc(v, sincRange, testData);
				 adj += (tmp1/testData[v]);
				 iCC++;
			 }
			 adj /= iCC;
			 //adj *= 2;
			 double[] diffS=new double[3];
			 for (int ix=0; ix<checkCount; ix++){
				 int i=ix+36-checkCount;
				 int pos=i*expandFactor;
				 double conv=0;
				 
				 conv =convolBySinc(pos, sincRange, testData)/adj;
				 //newData[i]=(int)Math.round(conv);
				 diffS[ix]=Math.abs(conv-testData[pos]);
				 //double ratio=Math.abs(conv)/sampled.get(s)[i];
			 }
		 
		 double tDiff=0;
		 for (int c=0; c<checkCount; c++)
		 {
		 	tDiff += diffS[c];
		 }
		 if (tDiff<0.005){
			 //aWriter.write("fit AT:("+n1+","+n2+","+n3+","+n4+") with "+diffS[0]+" and "+diffS[1]);
			 //aWriter.newLine(); 
		 } 
		 if (tDiff < diff2){
			 diff2=tDiff;
			 diff3[0]=diffS[0];
			 diff3[1]=diffS[1];
			 diff3[2]=diffS[2];
			 diffAt[0]=(int)Math.round(n1);
			 diffAt[1]=(int)Math.round(n2);;
			 //diffAt[2]=n3;
			 //diffAt[3]=n4;
			 bestRatio=adj;
			 //bestDt=nRatio/ratio;
			 bestFactor=expandFactor;
			 bestRange=sincRange;

		 }
					 }
				// }
			 //}
		 }
				 aWriter.write
				 //(good1+")"+bestRatio+"; n="+bestDt);aWriter.newLine();
				 //System.out.println
				 ("Line "+s+" f="+expandFactor+" diff="
						 		+dF.format(diff2)+" bf="+bestFactor+" range="+bestRange+ " r="+dF.format(bestRatio));	 
				 System.out.println
				 ("Line "+s+" f="+expandFactor+" diff="
						 		+dF.format(diff2)+" bf="+bestFactor+" range="+bestRange+ " r="+dF.format(bestRatio));	 
				  
		 }
		 
		 //good1 += "("+diffAt[0]+","+diffAt[1]+","+diffAt[2]+","+diffAt[3]+")";
		 //good1 += " with diff="+dF.format(diff2);
		 //good1 += " has a="+dF.format(diff3[0])+" b="+dF.format(diff3[1])+" c="+dF.format(diff3[2]);
		 aWriter.write
		 //(good1+")"+bestRatio+"; n="+bestDt);aWriter.newLine();
		 //System.out.println
		 ("!!!!Line "+s+" Best fit with diff="
				 		+dF.format(diff2)+" factor="+bestFactor+" range="+bestRange);
		 aWriter.newLine();
		 if (diff2 > 0.001) diffAt[0]=fineTuneTrianglePrediction(s, oldSample.get(s), bestRatio, bestFactor, bestRange, diffAt[0], diff2);
		 bestFitPoints[s]=diffAt[0];
	 }
		aWriter.close();
	} catch(IOException e){}
	 return bestFitPoints;//retV;
}

static int[] tryNewSample( Vector<int[]> sampled, String fname){
	int iLen=sampled.get(0).length;
	double pi=Math.PI;
	 Vector<int[]> retV=new  Vector<int[]>();
	 int[] bestFitPoints=new int[5];
	 int[] newData=new int[40];
	 int checkFrom=36;
	 double ratio;//=getMeanRatio(Arrays.copyOfRange(sampled.get(0), iLen-checkFrom, iLen));
	 //ratio += getMeanRatio(Arrays.copyOfRange(sampled.get(0), iLen-checkFrom, iLen));
	 //ratio += getMeanRatio(Arrays.copyOfRange(sampled.get(0), iLen-checkFrom, iLen));
	// ratio += getMeanRatio(Arrays.copyOfRange(sampled.get(0), iLen-checkFrom, iLen));
	 //ratio += getMeanRatio(Arrays.copyOfRange(sampled.get(0), iLen-checkFrom, iLen));
	 //ratio /= 5;
	 //double[setType][sqz][reTryPoint]
	 //double[][][] dtStart={{9, -3, -1, -1, -1}, {-4, 5, 1, 1, 1}} ;
	 double[][][] dtCenter={{{0.04, 0.06, 0, 0.06, 0.16}, {0.08, 0.04, -0.18, -0.06, -0.18 }},
			 {{0.18, 0.02, 0.02, 0, 0.02}, {-0.18, -0.06, 0, 0, 0.02}}
	 } ;
	 //double[][] dtEnd={{11, -1, 1, 1, 1},  {-2, 7, 3, 3, 3}};
	 double dtDelta=0.02;
	 
	 
	 int selected=((int)sqz % 2);
	 BufferedWriter aWriter;
	 String fileName="C:\\Users\\eric\\workspace\\GetLottery\\539\\"+fname+checkCount+".txt";
	 try {
			aWriter=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(fileName)));	

	 for (int s=0; s<5; s++){
		 aWriter.write("****************Checking line "+s);aWriter.newLine();
		 String good1="try line "+s+" fits at ";
		 ratio=getMeanRatio(Arrays.copyOfRange(sampled.get(s), iLen-checkFrom, iLen));
		 Arrays.fill(newData, 0);
		 for (int i=0; i<35; i++){
			 newData[i]=sampled.get(s)[iLen-35+i];
		 }
		 double diff2=2000;
		 double[] diff3=new double[3];
		 diff3[2]=0;
		 diff3[1]=10;
		 diff3[0]=10;
		 int[] diffAt=new int[4];
		 //double nRatio=ratio*0.8;
		 //for (int dt=-5; dt<6; dt++)
		 double rdt=dtCenter[setType][selected][s]-10*dtDelta;
		 double bestRatio=1.2;
		 double bestDt=0;
		 rdt=-0.2;
		 boolean fixDt=false;
		 if (setType==0 && s==3 && sqz==3){
			 fixDt=true;
			 rdt=-0.06;
		 }
		 if (setType==1 && s==2 && sqz==3){
			 fixDt=true;
			 rdt=0.00;
		 }
		 int iTry=0;
		 rdt=-0.02*10;
		 while (diff2>0.01)
		 { 
			 //if (fixDt && iTry > 0) break;
			 //if (!fixDt) 
			 rdt += dtDelta;
			 if (iTry > 20) 
				 break;
			 double nRatio=ratio*(1+rdt);
			 iTry++;
			 //System.out.println("Line "+s+" use ratio "+nRatio);
		 for (int n4=1+s; n4<36+s; n4++){
			 newData[38]=n4;
			 for (int n3=1+s; n3<36+s; n3++){
				 newData[37]=n3;
				 for (int n2=1+s; n2<36+s; n2++){
					 newData[36]=n2;
					 
		 for (int n1=1+s; n1<36+s; n1++){
			 newData[35]=n1;
			  
			 double[] diffS=new double[3];
		 for (int ix=0; ix<checkCount; ix++){
			 int i=ix+36-checkCount;
			 double conv=0;
			 for (int k=1; k<6+1; k++){
				 //if (i+k<1) continue;
				 int t=i+(int)((k-1)/sqz);
				 if (t > newData.length-1) break;
				 //if (i+k >39) break;
				 conv += sinc40PI[Math.abs(k)]*newData[i+(int)((k-1)/sqz)]*2/pi;
			 }
			 for (int k=1; k<6+1; k++){
				 if (i- k < 0) break;
				 int t=i-(int)(k/sqz);
				 if (t<0) break;
				 //if (i+k > iLen) break;
				 conv += sinc40PI[Math.abs(k)]*newData[i-(int)(k/sqz)]*2/pi;
			 }
			 conv /= nRatio;//ratio;//1.795;//2.1174;//
			 //newData[i]=(int)Math.round(conv);
			 diffS[ix]=Math.abs(conv-newData[i]);
			 //double ratio=Math.abs(conv)/sampled.get(s)[i];
		 }
		 
		 double tDiff=0;
		 for (int c=0; c<checkCount; c++)
		 {
		 	tDiff += diffS[c];
		 }
		 if (tDiff<0.005){
			 aWriter.write("fit AT:("+n1+","+n2+","+n3+","+n4+") with "+diffS[0]+" and "+diffS[1]);
			 aWriter.newLine(); 
		 } 
		 if (tDiff < diff2){
			 diff2=tDiff;
			 diff3[0]=diffS[0];
			 diff3[1]=diffS[1];
			 diff3[2]=diffS[2];
			 diffAt[0]=n1;
			 diffAt[1]=n2;
			 diffAt[2]=n3;
			 diffAt[3]=n4;
			 bestRatio=nRatio;
			 bestDt=nRatio/ratio;

		 }
					 }
				 }
			 }
		 }
		 }
		 //meanDiff /= iLen;
		 //meanRatio /= iLen;
		 retV.add(Arrays.copyOf(newData, iLen));
		 good1 += "("+diffAt[0]+","+diffAt[1]+","+diffAt[2]+","+diffAt[3]+")";
		 good1 += " with diff="+dF.format(diff2);
		 good1 += " has a="+dF.format(diff3[0])+" b="+dF.format(diff3[1])+" c="+dF.format(diff3[2]);
		 aWriter.write(good1+")"+bestRatio+"; n="+bestDt);aWriter.newLine();
		 bestFitPoints[s]=diffAt[0];
	 }
		aWriter.close();
	}  catch (IOException e){
		return null;
	} 
	 return bestFitPoints;//retV;
}

static double getSincHighTerms(double x)//for n=7 and up
{
	double retV=1.0/7.0;
	retV -= ((x/9)*(x/9)/8);
	retV += ((x/11)*(x/11)*(x/10)*(x/9)/8);
	retV -= ((x/13)*(x/13)*(x/12)*(x/11)*(x/10)*(x/9)/8);
	for (int i=1; i<8; i++){
		retV *= (x/7);
	}
	return -1*retV;
}
static double tryMonte(int forN){
	double pi=Math.PI;
	double retV=0;
	for (int i=1; i<501; i++){
		double x=(forN+Math.random())*pi;
		for (int j=1; j<501; j++){
			double y=Math.random()/pi;
			if (y<= Math.abs(Math.sin(x)/x))
			retV += 1;
		}		
	}
	return retV/250000;
}


	
	static void getSincData(){
		if (JackpotReader.sinc40PI[1]==0) JackpotReader.getSincData();
		sinc40PI=Arrays.copyOf(JackpotReader.sinc40PI, 58);
		//double checkValue=0;
		
	}




	static Vector<double[]> getRangePrimeFit(int range, Vector<int[]> inData){
		Vector<double[]> outResult=new Vector<double[]>();
		Vector<int[]> rangePrime=getPrimeData(inData);//getAscendPrimeData(inData);
		int iSet=inData.size();
		for (int s=0; s<iSet; s++){
		double[] iValue=new double[inData.get(0).length];
		Arrays.fill(iValue, 1);
			double iMax=39*range;
			double[] home=new double[range];
			for (int i=0; i<range; i++){
				home[i]=rangePrime.get(s)[i];
			}
			int k=inData.get(s).length;
			for (int i=6; i<k-range; i++){
			double primV=0;
					for (int n=0; n<range; n++){
						primV += Math.abs(rangePrime.get(s)[i+n]-home[n]);
					}
					iValue[i]=iMax-primV;
			}
			outResult.add(Arrays.copyOf(iValue, iValue.length));
		}
			
		return outResult;
	}

	String lineType;
	Vector<int[]> myCheckBackData;
	int myCheckBackStart;
	int myCheckBackEnd; //exclusive
	int checkBackOkCount;
	BufferedWriter checkFileLog;
	static final ReentrantReadWriteLock logLock=new ReentrantReadWriteLock();
	public boolean completeCheckBack;

	public void setParameter(Vector<int[]> thisData,int checkBackStart,	int checkBackEnd,//exclusive
			BufferedWriter log){
		myCheckBackData=new Vector<int[]>();
		for (int s=0; s<thisData.size(); s++){
			myCheckBackData.add(Arrays.copyOf(thisData.get(s), thisData.get(s).length));
		}
		myCheckBackStart=checkBackStart;
		myCheckBackEnd=checkBackEnd; //exclusive
		//int checkBackOkCount;
		checkFileLog=log;
		completeCheckBack=false;
	}
	
public void run(){
	
	double[] dd={1, 1.5};//2,3};//, 0.3, 0.5, 1, 1.5};
	int[] hitCount=new int[40];
	checkBackOkCount=0;
	System.out.println("start "+myCheckBackStart+" end "+myCheckBackEnd);//lineType);
	for (int ib=myCheckBackStart; ib<myCheckBackEnd; ib++){
		Vector<int[]> checkBackData=new Vector<int[]>();
		int[] target=new int[myCheckBackData.size()];
		for (int s=0; s<myCheckBackData.size(); s++){
			checkBackData.add(Arrays.copyOfRange(myCheckBackData.get(s), 0, ib));	
			target[s]=myCheckBackData.get(s)[ib];
		}
		Arrays.fill(hitCount, 0);
		
		for (int cc=2; cc<4; cc++){
			
			checkCount=cc;
			int byFactor=3;
			for (int i=0; i<dd.length; i++){
				sqz=dd[i];
				long tNow=System.currentTimeMillis();
				int[] orgF=//refineFound(dateAscend, "filterN"+(sqz*10)+lineType);//filterOutSample(dateAscend);;//
						tryExpanedSample(4, checkBackData, "filter"+byFactor+"X"+(sqz*10)+lineType);//filterOutSample(dateAscend);;//
				
				//System.out.println("Finish low pass try with "+
				                 //(System.currentTimeMillis() - tNow)+" milli secs");
				
				for (int s=0; s<checkBackData.size(); s++){
					hitCount[orgF[s]]++;
				}
			}
		}
		String targetLine="****** Line "+ib+"  .....Checking (";
		String foundLine="found (";
		String projectLine="projects (";
		int iFound=0;
		for (int idx=1; idx < 40; idx++){
			if (hitCount[idx]==0) continue;
			projectLine += ","+idx+"["+hitCount[idx]+"]";			
		}
		for (int s=0; s<checkBackData.size(); s++){
			targetLine += ""+target[s]+", ";
			if (hitCount[target[s]] == 0) continue;
			iFound++;
			foundLine += ""+target[s]+", ";				
		}
		logLock.writeLock().lock();
		if (iFound >0)
			checkOkTotall++;
		
		try {
			checkFileLog.write(targetLine+")");checkFileLog.newLine();
			checkFileLog.write(foundLine+")<"+iFound+">");checkFileLog.newLine();
			checkFileLog.write(projectLine+")");checkFileLog.newLine();
		}  catch (IOException e){			
		} 
		finally{
		logLock.writeLock().unlock();	
		}
	}
	completeCheckBack=true;
}

static int checkOkTotall=0;
static Vector<int[]> globalSample=null;
static Vector<int[]> prime1=null;
static Vector<int[]> prime2=null;
static int setType=0;
public static void main(String[] args)
{
	getSincData();
	int[] setTypes={0, 1};
	double[] dd={1, 1.5};//2,3};//, 0.3, 0.5, 1, 1.5};
	for (int iq=0; iq<1; iq++){
	JackpotReader jReaderDrop=JackpotReader.getInstance("test539.txt","開出順序");//
	//Vector<int[]> dropData=jReaderDrop.readData(5, 39, 390);
	String[] criteria={"開出順序", "大小順序"};
	setType=0;//setTypes[iq];
	String lineType=criteria[setType];
	JackpotReader jReaderOrder=JackpotReader.getInstance("test539.txt",lineType);//"開出順序");//"大小順序");//
	Vector<int[]> sampleData=jReaderOrder.readData(5, 39, 390);	
		globalSample=sampleData;
		int iLen1=sampleData.get(0).length;
		while (sampleData.get(0)[iLen1-1]==0) iLen1--;
		int[] testSeq=new int[iLen1];
		Vector<int[]> dateAscend=new Vector<int[]>();
		for (int s=0; s<5; s++){
			for (int i=0; i<iLen1; i++){
				testSeq[i]=
						sampleData.get(s)[iLen1-1-i];
			}
			dateAscend.add(Arrays.copyOf(testSeq, iLen1));
		}
		ExpanedDropDataFilter aJob=new ExpanedDropDataFilter();
		int iCheckStart=iLen1-300;
		int iCheckEnd=iLen1;
		int iFitCount=0;
		int iSuccess=0;
		int[] iFits={0, 0, 0, 0, 0, 0};
		int[] ccVal={3,4,5};//4, 5, 6};//2, 3, 4, 5, 6};//,7,8,9};
		int[] freqs={4,5,6,8};//2, 3, 4, 5, 6};
		BufferedWriter testLog=null;
		try {
			testLog=new BufferedWriter(new OutputStreamWriter(//new FileOutputStream("checkExpandedFitLog.txt")));
			new FileOutputStream("expand"+lineType+JackpotReader.drawDate+"freq"+freqs[0]+"-"+ccVal[0]+"chk.txt")));	
			
			double avgCandidates=0;
			int[] iStatistics=new int[6];
			Arrays.fill(iStatistics, 0);
			int cTryCase=0;
			iCheckStart=iCheckEnd-12;
		while (iCheckStart <= iCheckEnd){
			int iFound=0;
			Vector<int[]> testData=new Vector<int[]>();
			int[] targets=new int[5];
			int[] found=new int[40];
			Arrays.fill(found, 0);
			for (int s=0; s<dateAscend.size(); s++)
			{
				testData.add(Arrays.copyOfRange(dateAscend.get(s), 0, iCheckStart));
				if (iCheckStart<iLen1)
				targets[s]=dateAscend.get(s)[iCheckStart];
				else
					targets[s]=0;
			}
			

			//String[] hasPredic={"fit 6pts:", "fit 7pts:", "fit 8pts", "fit 9pts"};
			//int minCheckCount=3;
			for (int cc=0; cc < ccVal.length; cc++){
				//minCheckCount; cc<minCheckCount+1; cc++){
			
				checkCount=ccVal[cc];//cc*minCheckCount;
				
				
			//System.out.println("Working on "+lineType);
				
				int[] byFactor={4, 6, 8};
				int iFit=0;
				for (int i=0; i<freqs.length; i++){
					//sqz=dd[i];
					int filterBy=freqs[i];//yFactor[i];
					aJob.expandedBy=filterBy;
					//if (checkCount+aJob.expandedBy > 14) continue;
				//for (int i=1; i<dd.length; i++){
					//sqz=dd[i];
					long tNow=System.currentTimeMillis();
					System.out.println("Working on "+filterBy+" chkpts="+checkCount);
					int[] predictions=//refineFound(dateAscend, "filterN"+(sqz*10)+lineType);//filterOutSample(dateAscend);;//
						aJob.tryTriangleSample(testData);//dateAscend, "filterA"+checkCount);//filterOutSample(dateAscend);;//
				//tryNewSample(dateAscend, "filterN"+(sqz*10)+lineType);//filterOutSample(dateAscend);;//
				//checkBackFit(checkBackData, "filterN"+(sqz*10)+lineType);//filterOutSample(dateAscend);;//
				//aCharter.tryExpanedSample(4, dateAscend, "filter"+byFactor+"X"+(sqz*10)+lineType);//filterOutSample(dateAscend);;//
				//hasPredic += predictions.toString();
					System.out.println("Finish "+iCheckStart+" use "+filterBy+" filter with check last "+checkCount+" for "+
			                  (System.currentTimeMillis() - tNow)+" milli secs");
				String predics="get predictions:(";
				
				for (int p=0; p<predictions.length; p++){
					if (predictions[p] < 1 || predictions[p] > 39) continue;
					found[predictions[p]]++;
					//hasPredic[cc-1] += ""+predictions[p]+",";
				predics += (""+predictions[p]+"["+dF.format(merit_of_solutions[p])+"], ");
				}
				int iHas=0;
				for (int ig=0; ig<5; ig++){
					for (int p=0; p<predictions.length; p++){
						if (predictions[p]!=targets[ig]) continue;
						iHas ++;
						break;
					}
				}
				System.out.println(predics+")");
				//iFits[iHas]++;
				testLog.write(" use "+filterBy+" filter " +checkCount+" check "+predics+")"+iHas);
				testLog.newLine();
				
			//for (int s=0; s<dateAscend.size(); s++){
				//hitCount[orgF[s]]++;
				//iFound += predictions.length;
				
			}
		}
		String testTxt="Line ("+iCheckStart+") <<";
		String foundTxt="found (";
		iFound=0;
		for (int p=0; p<5; p++){
			testTxt += ""+targets[p]+",";
			if (found[targets[p]]>0){
				iFound++;
				foundTxt += ""+targets[p]+"["+found[targets[p]]+"], ";
			}
		}
		testLog.write(testTxt+">>>");
		testLog.newLine();
		String predictionTxt="Predic:(";
		int iPred=0;
		for (int p=0; p<40; p++){
			if (found[p]>0) {
				iPred++;
			predictionTxt += ""+p+"["+found[p]+"], ";
			}
			
		}
		//iFits[iFound]++;
		testLog.write(foundTxt+") "+iFound+" out of "+iPred);
		avgCandidates += iPred;
		testLog.newLine();
		//testLog.write(hasPredic[0]+" and "+hasPredic[1]+" and "+hasPredic[2]+" and "+hasPredic[3]);
		//testLog.newLine();
		
		testLog.write(predictionTxt+") ");
		testLog.newLine();
		
		if (iFound > 0) iSuccess++;
		iStatistics[iFound]++;
		cTryCase++;
		iCheckStart++;
	}
	String statText="try "+cTryCase+" cases and got ";
	for (int p=1; p<6; p++){
		statText += ""+p+":"+iStatistics[p]+", ";
	}
	testLog.write(statText+" and total fit cases:" +iSuccess);testLog.newLine();
	testLog.write("avg predictions=" +avgCandidates/cTryCase);testLog.newLine();
	
	
	testLog.write("Last date: "+JackpotReader.drawDate+" on "+iLen1+" data");testLog.newLine();
	testLog.close();
		}catch (IOException e){}
	}
/*
		BufferedWriter aWriter=null;
		 String fileName="Check539FilterResult.txt";
		 try {
				aWriter=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(fileName)));	
		 }  catch (IOException e){
				
			} 
		 Thread[] pool=new Thread[30];
		for (int iThr=0; iThr<30; iThr++){
			UseExpanedDataMath 
			aThr=new UseExpanedDataMath();
			aThr.setParameter(dateAscend, iThr*10, (iThr+1)*10, aWriter);
			pool[iThr]=new Thread(aThr);
			pool[iThr].start();
		}
		for (int iThr=0; iThr<30; iThr++){
		
			try {
				pool[iThr].join();
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}	
			
		}
		 try {
			aWriter.close();
		}  catch (IOException e){
			
		} 
	
		BufferedWriter aWriter;
		 String fileName="C:\\Users\\eric\\workspace\\GetLottery\\539\\CheckFilterResult.txt";
		 try {
				aWriter=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(fileName)));	

		int toTry=1;
		int[] hitCount=new int[40];
		int ttFitCount=0;
		for (int ib=iLen1-toTry; ib<iLen1; ib++){
			Vector<int[]> checkBackData=new Vector<int[]>();
			int[] target=new int[dateAscend.size()];
			for (int s=0; s<dateAscend.size(); s++){
				checkBackData.add(Arrays.copyOfRange(dateAscend.get(s), 0, ib));	
				target[s]=dateAscend.get(s)[ib];
			}
			Arrays.fill(hitCount, 0);
			for (int cc=2; cc<4; cc++){
				
				checkCount=cc;
				//System.out.println("Working on "+lineType);
				
				for (int i=0; i<dd.length; i++){
					sqz=dd[i];
					long tNow=System.currentTimeMillis();
					int[] orgF=//refineFound(dateAscend, "filterN"+(sqz*10)+lineType);//filterOutSample(dateAscend);;//
							//tryNewSample(dateAscend, "filterN"+(sqz*10)+lineType);//filterOutSample(dateAscend);;//
					checkBackFit(checkBackData, "filterN"+(sqz*10)+lineType);//filterOutSample(dateAscend);;//
					
					//System.out.println("Finish low pass try with "+
					                 // (System.currentTimeMillis() - tNow)+" milli secs");
					
					for (int s=0; s<dateAscend.size(); s++){
						hitCount[orgF[s]]++;
					}
				}
			}
			String targetLine="****** Line "+ib+"  .....Checking (";
			String foundLine="found (";
			String projectLine="projects (";
			int iFound=0;
			for (int idx=1; idx < 40; idx++){
				if (hitCount[idx]==0) continue;
				projectLine += ","+idx+"["+hitCount[idx]+"]";			
			}
			for (int s=0; s<dateAscend.size(); s++){
				targetLine += ""+target[s]+", ";
				if (hitCount[target[s]] == 0) continue;
				iFound++;
				foundLine += ""+target[s]+", ";				
			}
			if (iFound >0)
			ttFitCount++;
			
			aWriter.write(targetLine+")");aWriter.newLine();
			aWriter.write(foundLine+")<"+iFound+">");aWriter.newLine();
			aWriter.write(projectLine+")");aWriter.newLine();
		}
		
		aWriter.write("Found total "+ttFitCount+" line fits out of 300 lines");
		aWriter.newLine();
		 
			aWriter.close();
		}  catch (IOException e){
			
		} 
		/**/
		/*
		int range=11;
	       MyMatrix test39=getSinValuesMatrix(iLen1-range-1, range);
	        MyMatrix work39=new MyMatrix(test39);
	        //CommonOps.invert(work39);
	        CommonOps.invert(test39, work39);
	        
	        double[] coeff=getCoeff(work39, iLen1-range-1, range, testSeq);
	        double[] reCheck=getCoeff(test39, 0, range, coeff);
	        String orig="(";
	        String found="(";
	        for (int i=0; i<range; i++){
	        	orig += (sampleData.get(0)[i]+", ");
	        	found += (reCheck[i]+", ");
	        }
	        System.out.println(orig+"); == "+found+")");
	     */  
	/*
		//Vector<int[]> 
		prime1=getPrimeData(globalSample);
		//Vector<int[]> 
		prime2=getPrimeData(prime1);
		int[] testData={sampleData.get(0)[0], sampleData.get(1)[0], sampleData.get(2)[0], sampleData.get(3)[0], sampleData.get(4)[0]}; 
		//scanForFit(sampleData, testData);
			
		QuoteCharter qCharter=new QuoteCharter();
		//aCharter.myQuotes=allData;
		qCharter.samples=new Vector<int[]>();//sampleData;
		for (int i=0; i<sampleData.size(); i++){
			//qCharter.samples.add(Arrays.copyOf(sampleData.get(i), 72));
		}
		qCharter.hits=5;
		qCharter.maxNumber=39;
		//qCharter.run();
		*/
		//measuredPDF=getRangePDF(0, globalSample.get(0).length, globalSample);
		
		//aCharter.fileBase="C:\\Users\\eric\\workspace\\GetLottery\\539\\";
		//File myDir=new File(aCharter.fileBase);
		//if (!myDir.exists()) myDir.mkdir();
		//evaluateAutoCorr(sampleData);
		/*
		for (int s=0; s<sampleData.size(); s++){
			int[] dd=sampleData.get(s);
			for (int i=0; i<dd.length-2; i++){
				if (dd[i]==dd[i+1] && dd[i]==dd[i+2]){
					System.out.println("found repeat 3 times at "+i+" for line"+(s+1));
					double[] pdf=getRangePDF(i, 80, sampleData);
					String txt="";
					for (int k=1; k<pdf.length; k++)
						txt +=(" "+k+"["+pdf[k]+"],");
					System.out.println(txt+") ");
					if (i==0) continue;
					txt="new line has ( ";
					for (int s1=0; s1<sampleData.size(); s1++){
						txt += (" "+sampleData.get(s1)[i-1]);
					}
					System.out.println(txt+") ");
				}
			}
		}
		
		for (int i=0; i<iLen1-2; i++){
			int iQ=0;
			for (int s=0; s<sampleData.size(); s++){
				for (int s2=0; s2<sampleData.size(); s2++){
					if (sampleData.get(s)[i]==sampleData.get(s2)[i+2]){
						iQ++;
						break;
					}
				}
				if (iQ >3){
					System.out.println("found 4 skip repeat at "+i);
					double[] pdf=getRangePDF(i, 80, sampleData);
					String txt="";
					for (int k=1; k<pdf.length; k++)
						txt +=(" "+k+"["+pdf[k]+"],");
					System.out.println(txt+") ");
					if (i==0) continue;
					txt="new line has ( ";
					for (int s1=0; s1<sampleData.size(); s1++){
						txt += (" "+sampleData.get(s1)[i-1]);
					}
					System.out.println(txt+") ");
				}
			}
		}
		*/
		//aCharter.fileBase="C:\\Users\\eric\\workspace\\GetLottery\\539\\measured\\";
		//myDir=new File(aCharter.fileBase);
		//if (!myDir.exists()) myDir.mkdir();
		
		//DataAutocorrelation.fileBase="C:\\Users\\eric\\workspace\\GetLottery\\539\\";
		//Vector<double[]> atf=DataAutocorrelation.measuredAutoCorrelation(sampleData);
		    //getAutoCorrelation(sampleData);
		//for (int i=0; i<5; i++){
		//aCharter.putList2File(atf, "autolines",
				//globalSample);
		//}
		//Vector<double[]> pDup=DataAutocorrelation.getRangePrimeFit(8, sampleData);
	    //getAutoCorrelation(sampleData);
	//for (int i=0; i<5; i++){
	//aCharter.putList2File(pDup, "repPrime"+lineType,
			//globalSample);
	//}
		
		
		/*
		for (int rg=1; rg<5; rg++){
			Vector<int[]> atfRange=aCharter.getRangeAutoCorrelation(sampleData, rg*12);		
			for (int i=0; i<5; i++){
				aCharter.putList2File(Arrays.copyOf(atfRange.get(i), 300), "autoRange"+(rg*12)+"line"+(i+1),
						globalSample.get(i));
			}
		}
		//aCharter.myQuotes=allData;
		
			aCharter.samples=atf;
			totalPoints=atf.get(0).length>56?56:atf.get(0).length;	
			aCharter.drawMultiple=true;
			aCharter.hits=5;
			aCharter.maxNumber=39;
			aCharter.forFile="auto";
			aCharter.run();	
			
			
			Vector<int[]> rngR=new Vector<int[]>();
			*/
//---------------------------------------------------------------	
			/*
			aCharter.fileBase="C:\\Users\\eric\\workspace\\GetLottery\\539\\replica\\";
			myDir=new File(aCharter.fileBase);
			if (!myDir.exists()) myDir.mkdir();
			
			
			Vector<int[]> rngBkl=new Vector<int[]>();
			for (int i=0; i<5; i++){
					rngR.add(aCharter.rangeBulkReplication(sampleData, 3+i));//3+i*6));
			}
			aCharter.bulkNormalization(rngR);
			for (int il=0; il<5; il++){
			    Vector<int[]> bkMax=aCharter.putList2File(Arrays.copyOf(rngR.get(il), 300), "dummy",
					globalSample.get(il));
			    System.out.print(new DecimalFormat("00").format(il+1)+": ");
			    for (int i=0; i<bkMax.size(); i++){
			    	int[] bMx=bkMax.get(i);
			    	
			    	for (int j=0; j<bMx.length; j++)
			    	{
			    		System.out.print("mx"+i+" at-"+bMx[j]+" (");
			    		for (int k=0; k<5; k++){
			    			if (bMx[j]>1)
			    			System.out.print(""+globalSample.get(k)[bMx[j]-1]+", ");
			    		}
			    		System.out.println(" ) ");
			    	}
			    }
			}
			aCharter.samples=rngR;
			totalPoints=rngR.get(0).length>100?100:rngR.get(0).length;		
			aCharter.hits=5;
			aCharter.maxNumber=39;
			aCharter.forFile="bulk";
			aCharter.run();	
			
			/*
			for (int i=4; i<13; i++){
			rngR=aCharter.rangeReplication(sampleData, i);
				for (int k=0; k<5; k++){
			aCharter.putList2File(Arrays.copyOf(rngR.get(k), 324), "rep"+(i)+"line"+(k+1),
					globalSample.get(k));
				}	
				//aCharter.samples=rngR;
				//aCharter.forFile="line"+new DecimalFormat("00").format(i);
				//aCharter.run();	
			}
			*/

/*			
			aCharter.fileBase="C:\\Users\\eric\\workspace\\GetLottery\\539\\";
			aCharter.hits=2;
			
			Vector<int[]> dlAvg240=aCharter.deltaAverage(sampleData, 240);
			Vector<int[]> dlAvg24=aCharter.deltaAverage(sampleData, 24);
			for (int k=1; k<5; k++){
				Vector<int[]> mvAvg=aCharter.movingAverage(sampleData, 6*k);			
				Vector<int[]> avgData=new Vector<int[]>();
				for (int i=0; i<5; i++){
					avgData.add(Arrays.copyOf(sampleData.get(i), 72));
					avgData.add(Arrays.copyOf(mvAvg.get(i), 72));
					aCharter.samples=avgData;
					totalPoints=avgData.get(0).length>72?72:avgData.get(0).length;
					aCharter.forFile="mvAvg_"+(6*k)+"_240_"+i;
					aCharter.drawDelta(Arrays.copyOf(dlAvg240.get(i), 72));
					aCharter.forFile="mvAvg_"+(6*k)+"_24_"+i;
					aCharter.drawDelta(Arrays.copyOf(dlAvg24.get(i), 72));
					avgData.clear();
				}
			}
			*/
	}


}
