
/*
 * 1.2 version.
 */

import java.io.*;
/*
import java.util.*;
*/
import java.util.Date;
import java.util.Calendar;
import java.util.regex.*;
import java.awt.*;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.awt.event.*;
import java.awt.geom.*;

import javax.swing.*;

import java.awt.image.*;

import javax.imageio.*;

import java.io.File;
import java.util.Vector;
import java.io.IOException;
import java.lang.Thread;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Point;
import java.util.Random;
import java.util.Vector;

import javax.swing.BorderFactory;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.SwingUtilities;

/* 
 * This is like the FontDemo applet in volume 1, except that it 
 * uses the Java 2D APIs to define and render the graphics and text.
 *
 * read data file data5day generated by Script c.data5day
 */

public class SimpleDraw extends JPanel implements Runnable 
{
//start of program
    final static int maxCharHeight = 30;
    final static int minFontSize = 12;
    final static int maxchartPoints = 400;

    final static Color bg = Color.white;
    final static Color fg = Color.black;
    final static Color red = Color.red;
    final static Color white = Color.white;

    final static BasicStroke stroke = new BasicStroke(2.0f);
    final static BasicStroke wideStroke = new BasicStroke(8.0f);

    final static float dash1[] = {10.0f};
    final static BasicStroke dashed = new BasicStroke(1.0f, 
                                                      BasicStroke.CAP_BUTT, 
                                                      BasicStroke.JOIN_MITER, 
                                                      10.0f, dash1, 0.0f);
	private static DecimalFormat dataF=new DecimalFormat("##.##");
	private static DecimalFormat dataIntF=new DecimalFormat("00");
	//static String DataSrc=new String("daily_d.txt");
    //static JFrame f;
	
	private static Vector<Point> drawPoints=new Vector<Point>();

    FontMetrics fontMetrics;
	static long today1stSecond=0, today930Second=0;

      
	
	Vector<String> myQuotes;
	String lastQuoteTime;
	static String mktStartTime="09:30";
	String samplingStartFrom;
	String samplingEnd;
	public String mySymbol;
	String YhSymb;
	int pVolume;
	int lastPVolTime;
	
	double priceMax, priceMin;
	int volDeltaMax, volDeltaMin;
	boolean testMode;
	String lastPrice;
	String lastVol;
	String lastChange;
	boolean isFileData;
	Vector<RealPoint> myCurveData;
 

	    public Dimension getPreferredSize() {
	        return new Dimension(550,400);
	    }


     

public void init() 
{
        //Initialize drawing colors
        setBackground(bg);
        setForeground(fg);
}
    


public SimpleDraw(Vector<RealPoint> curveData)
{
myCurveData=curveData;
setBorder(BorderFactory.createLineBorder(Color.black));
}

public SimpleDraw()
{
}

public void setDrawData(Vector<RealPoint> curveData)
{
myCurveData=curveData;
}

  
private class DrawParameters
{
public double yMax, yMin, xMax, xMin;
	DrawParameters()
	{
	yMax=Double.MAX_VALUE/10;
	yMin=-1*yMax;
	xMax=Double.MAX_VALUE/10;
	xMin=-1*xMax;	
	}

}

DrawParameters GetRange(Vector<RealPoint> vP)
{
if (vP.size() < 1) return null;
	DrawParameters aDpm=new DrawParameters();
	for (int i=0; i<vP.size(); i++)
	{
		RealPoint aP=vP.get(i);
		if (aP.x < aDpm.xMin) aDpm.xMin=aP.x;
		if (aP.x > aDpm.xMax) aDpm.xMax=aP.x;
		if (aP.y < aDpm.yMin) aDpm.yMin=aP.x;
		if (aP.y > aDpm.yMax) aDpm.yMax=aP.x;
	}
	return aDpm;
}
   
	static FontMetrics pickFont(Graphics2D g2,
                         String longString,
                         int xSpace) 
	{
        	boolean fontFits = false;
	        Font font = g2.getFont();
	        String name = font.getName();
	        int style = font.getStyle();
		g2.setFont(font = new Font(name,  style, minFontSize+20));
	        do
		{
			FontMetrics fontMetrics = g2.getFontMetrics();
	        	if ( (fontMetrics.getHeight() <= maxCharHeight)
                		 && (fontMetrics.stringWidth(longString)) <= xSpace)
			break;
			int size=g2.getFont().getSize();
			g2.setFont(font = new Font(name,  style, size-1));
        	} while (g2.getFont().getSize() > minFontSize);

	        return g2.getFontMetrics();
	}

	

	BufferedImage DrawSimpleCurve(Dimension d, Vector<RealPoint> curveData)
	{

	int dmX=d.width;
	int dmY=d.height;
	Rectangle area=new Rectangle(d);
	BufferedImage gBufImg= new BufferedImage(dmX, dmY, BufferedImage.TYPE_INT_ARGB);
	Graphics2D g2=gBufImg.createGraphics();
        //Graphics2D g2 = (Graphics2D) g;
	String exS="12345.66";
	 g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
        //Dimension d = getSize();

        fontMetrics = pickFont(g2, exS, (int)(d.width*0.2));
	g2.setBackground(Color.white);
	int showWidth=fontMetrics.stringWidth(exS);
	int showHeight=fontMetrics.getHeight();
        Color fg3D = Color.lightGray;

        int myChartWidth = (int)(d.width*0.90);
	int myChartHeight = (int)(d.height*0.90);

        int sx=0, sy=0, sdy=0;
	int chartPoints;//=myDrawData.size();
	chartPoints=curveData.size();
	if (chartPoints < 1) return null;
	g2.clearRect(0,0, d.width, d.height);

	g2.setColor(Color.black);
	g2.setStroke(stroke);
	//g2.drawString(label, myChartWidth, priceFloor);
        g2.draw(new Line2D.Double(0, 0, 0, myChartHeight));
	g2.draw(new Line2D.Double(0, myChartHeight, myChartWidth, myChartHeight));

	DrawParameters dPm=GetRange(curveData);
	
        for (int i=1; i<5; i++)
        {
		g2.setStroke(dashed);
		g2.setColor(Color.blue); 
		double val=(dPm.yMax-dPm.yMin)*i/5+dPm.yMin;
		int yy=myChartHeight-i*(myChartHeight/5); 
	        g2.draw(new Line2D.Double(0, yy, myChartWidth, yy));	
		g2.setStroke(stroke);
		g2.setColor(Color.black);         
		g2.drawString(" "+dataF.format(val) ,0, yy);
	}
	
	g2.setColor(Color.blue);
        g2.setStroke(stroke);
        GeneralPath polylineD = new GeneralPath(GeneralPath.WIND_EVEN_ODD,
                                               chartPoints);
	double xRange=dPm.xMax-dPm.xMin;
	double yRange=dPm.yMax-dPm.yMin;
	int drawLeft=0;
	int drawRight=myChartWidth;
	int xPoints=drawRight - drawLeft;
       	int drawTop=0;
	int drawBot=myChartHeight;
	int priceFloor=0;
	int yPoints=drawTop - drawBot;
        RealPoint aData=curveData.get(0);
	sy=(int)((aData.y-dPm.yMin)/yRange*yPoints);       
        polylineD.moveTo (0, drawBot + sy);// sy is negative for priceDrawRange is negative
	double dNow=0;
	String sDiff;
        for (int i=1; i<chartPoints; i++)
        {
		aData=curveData.get(i);
            if (aData.price < priceMin) continue;
            sx=(int)((aData.x-dPm.xMin)/xRange*xPoints); 
           	sy=(int)((aData.y-dPm.yMin)/yRange*yPoints);       
         	polylineD.lineTo(sx, priceFloor+sy);
        };
        g2.draw(polylineD);


	return gBufImg;
	}


    public void paint(Graphics g) {
        Graphics2D g2 = (Graphics2D) g;
        Dimension d = getSize();
	BufferedImage toDraw=DrawSimpleCurve(d, myCurveData);
	g2.drawImage(toDraw, null, 0, 0);

	//g2.dispose();
	
	}
	    

public void paintComponent(Graphics g) {
	        super.paintComponent(g); 
		paint(g);
		      
	    }  
	

	public boolean fillImg(Graphics g, int width, int height)
	{
		Graphics2D g2 = (Graphics2D) g;
        	BufferedImage toDraw=DrawSimpleCurve(new Dimension(width, height), myCurveData);
		if (toDraw == null) return false;
		g2.setBackground(Color.white);
		g2.drawImage(toDraw, null, 0, 0);
		return true;	
	}

public void putInFile(BufferedImage bi)
{
	try {
		String myDirName="c:/MonteCarlo/";
		File myDir=new File(myDirName);
		if (!myDir.exists()) myDir.mkdir();
		String myProj=myDirName+"RadiativeDecay";
		File myNew=new File(myProj+".png");
		ImageIO.write(bi, "png", myNew);
		File myDup=new File(myProj+"2.png");
		File myOld=new File(myProj+"Old.png");
		if (myOld.exists()) myOld.delete();
		if (myDup.exists() && !myOld.exists()) myDup.renameTo(myOld);
		myNew.renameTo(myDup);
	} catch (IOException e){System.out.println("Cannot create bmp file");}
	
}


public void run() 
{
        //ShapesDemo2D Demo2D = new ShapesDemo2D();
        //f.getContentPane().add("Center", Demo2D);
        //Demo2D.init();
        int width=600, height=500;
//System.out.println("I am here");
	//readChartData();
	//f.pack();
	//Demo2D.setSize(new Dimension(width, height));
        //f.setSize(new Dimension(width, height));
        //f.setVisible(true);
	//BufferedImage bi=(BufferedImage)Demo2D.createImage(width, height);
	BufferedImage bi=new BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB);
	//Graphics g=bi.getGraphics();
	//Demo2D.paint(g);
	Graphics g=bi.createGraphics();
	if (fillImg(g, width, height))
	{
		putInFile(bi);
	}
}

void drawMyData()
{
int width=600, height=500;
JFrame f;
        //ShapesDemo2D Demo2D = new ShapesDemo2D();
        //f.getContentPane().add("Center", Demo2D);
        //Demo2D.init();
       
//System.out.println("I am here");
	//readChartData();
	//f.pack();
	//Demo2D.setSize(new Dimension(width, height));
        //f.setSize(new Dimension(width, height));
        //f.setVisible(true);
	//BufferedImage bi=(BufferedImage)Demo2D.createImage(width, height);
	BufferedImage bi=new BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB);
	//Graphics g=bi.getGraphics();
	//Demo2D.paint(g);
	Graphics g=bi.createGraphics();
	if (fillImg(g, width, height))
	{
	Graphics2D g2=(Graphics2D)g;
	g2.getBackground();
        //g2.setForeground(fg);	
	g2.drawImage(bi, null, 0, 0);
	}

}

//end of program
private static void createAndShowGUI() 
	{
	        System.out.println("Created GUI on EDT? "+
	        SwingUtilities.isEventDispatchThread());
	        JFrame f = new JFrame("Swing Paint Demo");
	        f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
	        JPanel aPanel=new JPanel();
	        f.add(aPanel);
	        f.pack();
	        f.setVisible(true);
	 }

public static void main(String[] args)
{
	double   lambda = 0.1;   // decay constant
	double   dt     = 0.1;   // time step
	int iStep=0;
	int      n0     = 1000;  // initial number of parents
	int            i, n, nn, nTheory;
	double         t, tmax, r, error1 ;
		 
		 n    = n0;
		 nn   = n0;
		 t    = 0.0;
		 tmax = 50.0;


	while(t<=tmax)
	{
		    t += dt;
		    iStep++;

		    // Theoratical (expeced) number of undecayed nuclei at time t 
		    //nTheory = nint( n0*Math.exp(-lambda*t) );

		    // Loop over each remaining parent nucleus
		    for(i=1; i<=nn; i++) {
		       r = Math.random();

		       // Decide if the nucleus decays
		       if( r<lambda*dt ) n--;
		    }

		    nn = n;

		    // Error from counting operation
		    error1 = Math.sqrt(n);
		    
		   drawPoints.add(new Point(iStep, nn));
		   
	}

	SwingUtilities.invokeLater(new Runnable() 
		{
	            public void run() {
	                createAndShowGUI(); 
	            }
	        });
}


}
