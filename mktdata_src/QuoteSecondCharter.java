/*
 * 1.2 version.
 */

import java.io.*;
/*
import java.util.*;
*/
import java.util.Date;
import java.util.Calendar;
//import java.util.regex.*;
import java.awt.*;
import java.text.DecimalFormat;
import java.awt.geom.*;
import javax.swing.*;
import java.awt.image.*;
import javax.imageio.*;
import java.io.File;
import java.util.Vector;
import java.io.IOException;
import java.lang.Thread;

/* 
 * This is like the FontDemo applet in volume 1, except that it 
 * uses the Java 2D APIs to define and render the graphics and text.
 *
 * read data file data5day generated by Script c.data5day
 */

public class QuoteSecondCharter extends JFrame implements Runnable 
{
/**
	
	 */
	private static final long serialVersionUID = 161720875199630789L;
	//start of program
    final static int maxCharHeight = 30;
    final static int minFontSize = 12;
    final static int maxchartPoints = 400;

    final static Color bg = Color.white;
    final static Color fg = Color.black;
    final static Color red = Color.red;
    final static Color white = Color.white;

    final static BasicStroke stroke = new BasicStroke(2.0f);
    final static BasicStroke wideStroke = new BasicStroke(8.0f);

    final static float dash1[] = {10.0f};
    final static BasicStroke dashed = new BasicStroke(1.0f, 
                                                      BasicStroke.CAP_BUTT, 
                                                      BasicStroke.JOIN_MITER, 
                                                      10.0f, dash1, 0.0f);
	private static DecimalFormat dataF=new DecimalFormat("##.##");
	private static DecimalFormat dataIntF=new DecimalFormat("00");
	//static String DataSrc=new String("daily_d.txt");
    //static JFrame f;
	


    FontMetrics fontMetrics;
	static long today1stSecond=0, today930Second=0;

      
	
	Vector<String> myQuotes;
	String lastQuoteTime;
	static String mktStartTime="09:30";
	String samplingStartFrom;
	String samplingEnd;
	public String mySymbol;
	String YhSymb;
	int pVolume;
	int lastPVolTime;
	
	double priceMax, priceMin;
	int volDeltaMax, volDeltaMin;
	boolean testMode;
	String lastPrice;
	String lastVol;
	String lastChange;
	boolean isFileData;
      
private class SimpleQuote
{
String symbol;
String date;
String time;
double price;
int vol;

	public SimpleQuote(String aLine)
	{
	String[] tokens=aLine.split("-");
		if (tokens.length < 5)
		return;
		try {
			symbol=tokens[0];
		date=tokens[1];
		time=tokens[2];
		price=Double.parseDouble(tokens[3]);
		vol=0;
		if (tokens[4].charAt(0) == '*')
		vol=-99;
		else
		{

			String[] vTok=tokens[4].split(",");
			for (int i=0; i<vTok.length; i++)
			{
				vol = (1000*vol+Integer.parseInt(vTok[i]));
			}
			
		}
		} catch(NumberFormatException e){
			System.out.println("Bad data:"+aLine); vol=-99;}
	}
	
	public SimpleQuote()
	{
		symbol="";
		date="0.0";
		time="00:00";
		price=0;
		vol=0;		
	}
}

private class DrawData
{
public double price;
public int volDelta;
	public DrawData(double x, int y)
	{
		price=x;
		volDelta=y;
	}
	public String toString()
	{
		return "("+dataF.format(price)+", "+dataIntF.format(volDelta)+")";
	}
}

Vector<DrawData> myDrawData;

public void init() 
{
        //Initialize drawing colors
        setBackground(bg);
        setForeground(fg);
	if (today1stSecond==0)
	getToday1stSecond();
}
    
static void getToday1stSecond()
{
		Date inDate=new Date();
		Calendar aDay=Calendar.getInstance();
		int lhr=aDay.get(Calendar.HOUR_OF_DAY);
		int lmin=aDay.get(Calendar.MINUTE);
		int lsec=aDay.get(Calendar.SECOND);
	        
		today1stSecond=inDate.getTime()/1000-3600*lhr-60*lmin-lsec;
		today930Second=today1stSecond+9*3600+30*60; 
		System.out.println("Today start at:"+ today930Second);
}

int time2Int(String aTime)
{
String[] vTok=aTime.split(":");
	if (vTok.length < 1)
	return Integer.parseInt(vTok[0]);
	return 60*Integer.parseInt(vTok[0])+Integer.parseInt(vTok[1]);
}

String dataDir;
public QuoteSecondCharter(Vector<String> myTradeData, String... dir)
{
	lastQuoteTime=new String("00:00");

	myQuotes=myTradeData;
	priceMax=0;
	priceMin=999999;
	volDeltaMax=0;
	volDeltaMin=999999999;
	pVolume=999999999;
	testMode=false;
	isFileData=true;
	YhSymb=null;
	init();
	dataDir="";
	if (dir.length > 0) dataDir=dir[0];
}

public QuoteSecondCharter(Vector<String> myTradeData, MktQuote thisQuote, String... dir)
{
	lastQuoteTime=new String("00:00");
	myQuotes=myTradeData;
	priceMax=0;
	priceMin=999999;
	volDeltaMax=0;
	volDeltaMin=999999999;
	pVolume=999999999;
	testMode=false;
	isFileData=false;
	YhSymb=null;
	init();
	dataDir="";
	if (dir.length > 0) dataDir=dir[0];
}

public void setYhSymb(String str)
{
YhSymb=str;
	int iV=str.indexOf("@");
	if (iV > 0) 
	{
		pVolume=Integer.parseInt(str.substring(iV+1));
		//YhSymb=str.substring(0,iV);
	}
}

public void setMktStartTime(String stm)
{
mktStartTime=stm;
}

public void setSamplingRange(String tmFrom, String tmEnd)
{
samplingStartFrom=tmFrom;
samplingEnd=tmEnd;
}

public void setTestMode(boolean tF)
{
testMode=tF;
}

String changeInPercent()
{
double lastP=0;
if (lastPrice != null)
	lastP= Double.parseDouble(lastPrice);
	if (lastP == 0) return "0.0";

double lastX=0;
	if (lastChange != null)
	{
		lastX=Double.parseDouble(lastChange.replace("N", "-"));
	}
	return dataF.format(100*lastX/(lastP-lastX));
}

void readChartData() 
{
     // String delm="-";
      //Pattern p=Pattern.compile(delm);
	if (myDrawData==null)
	myDrawData=new Vector<DrawData>();
	SimpleQuote lastQuote=new SimpleQuote();
	lastQuote.time=mktStartTime;
	//int k=0;
	int i=myQuotes.size();
	DrawData aXY;
	for (i=myQuotes.size()-1; i>0; i--) 
	{
		SimpleQuote aQuote=new SimpleQuote(myQuotes.get(i));
		if (aQuote.time.indexOf(":") < 0) {continue;}
		mySymbol=aQuote.symbol;
		if (lastQuote.vol==0) {lastQuote=aQuote; samplingStartFrom=aQuote.time; continue;}
		
//System.out.println(aQuote.time+" --> "+lastQuote.time);
		int j=time2Int(lastQuote.time) - time2Int(aQuote.time);	
		if (j==0) { continue;}			
		if (aQuote.vol<0 || aQuote.vol != lastQuote.vol)// < 0 when no vol data
		{
			double pDiff=(lastQuote.price - aQuote.price)/j;
			for (int h=0; h<j; h++)
			{
			aXY=new DrawData(lastQuote.price-(h+1)*pDiff, (lastQuote.vol-aQuote.vol)/j);
			if (aXY.price > priceMax) priceMax=aXY.price;
			if (aXY.price < priceMin) priceMin=aXY.price;
			if (aXY.volDelta > volDeltaMax) volDeltaMax=aXY.volDelta;
			if (aXY.volDelta < volDeltaMin) volDeltaMin=aXY.volDelta;
				myDrawData.add(aXY);
			}
/*
			if (mySymbol.compareTo("AAPL") == 0)
			{
				if (j>5) 
				System.out.println(lastQuote.time+"->"+aQuote.time+" at "+i);
				//if (i % 10 ==0) System.out.println("<<"+aQuote.time+">>"+i);
			}
*/			
			lastQuote=aQuote;
		};
		samplingEnd=aQuote.time;
		lastPrice=dataF.format(aQuote.price);
		lastVol=dataIntF.format(aQuote.vol);
		//i++;				
	}
	String last1=myQuotes.get(myQuotes.size()-1);
	String[] qq=last1.split("-");
	lastChange=qq[qq.length-1];
	if (isFileData && myDrawData.size() > 0)
	{
	System.out.println("First Draw Data "+ myDrawData.get(0).toString());
	System.out.println("Last Draw Data "+ myDrawData.get(myDrawData.size()-1).toString());
	}
	if (!testMode) return;
	for (i=0;i<myDrawData.size(); i++)
	{
	System.out.println("<"+myDrawData.get(i).toString()+">");
	}
	System.out.println("<P:"+priceMax+","+priceMin+")(V:"+volDeltaMax+","+volDeltaMin+")");

}
    
    
	static FontMetrics pickFont(Graphics2D g2,
                         String longString,
                         int xSpace) 
	{
        	//boolean fontFits = false;
	        Font font = g2.getFont();
	        String name = font.getName();
	        int style = font.getStyle();
		g2.setFont(font = new Font(name,  style, minFontSize+20));
	        do
		{
			FontMetrics fontMetrics = g2.getFontMetrics();
	        	if ( (fontMetrics.getHeight() <= maxCharHeight)
                		 && (fontMetrics.stringWidth(longString)) <= xSpace)
			break;
			int size=g2.getFont().getSize();
			g2.setFont(font = new Font(name,  style, size-1));
        	} while (g2.getFont().getSize() > minFontSize);

	        return g2.getFontMetrics();
	}

	boolean DrawGraphics(Graphics2D g2, Dimension d)
	{
	//int dmX=d.width;
	//int dmY=d.height;
		
        //Graphics2D g2 = (Graphics2D) g;
	String exS="12345.66";
	 g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
        //Dimension d = getSize();

        fontMetrics = pickFont(g2, exS, (int)(d.width*0.2));
	g2.setBackground(Color.white);
	int showWidth=fontMetrics.stringWidth(exS);
	int showHeight=fontMetrics.getHeight();
        //Color fg3D = Color.lightGray;

        int myChartWidth = (int)(d.width*0.90);
        //int myGridHeight = d.height/10;   //3/10 for vol, 6/10 for price  
	int priceFloor=60*d.height/100;
	int priceCeiling=3*d.height/100;
	int volCeiling=65*d.height/100;
	int volFloor=95*d.height/100;   
        //int myGridFloor = 0;
        int sx=0, sy=0, sdy=0;
	double vd; 
	//readTodayData();
	int chartPoints=myDrawData.size();
	if (chartPoints < 1) return false;
	g2.clearRect(0,0, d.width, d.height);

//DOW
	priceMax *= 1.002;
	priceMin *= 0.999;
	double priceSpan=priceMax-priceMin;
        vd=priceSpan/5;
	int priceDrawRange=priceCeiling-priceFloor;
	sdy=(priceCeiling-priceFloor)/5;
	String label=new String(" "+dataF.format(priceMin));
	//myGridFloor += myGridHeight;
	g2.setColor(Color.black);
	g2.setStroke(stroke);
	g2.drawString(label, myChartWidth, priceFloor);
        g2.draw(new Line2D.Double(0, priceFloor, myChartWidth, priceFloor));

        for (int i=1; i<5; i++)
        {
		g2.setStroke(dashed);
		g2.setColor(Color.blue); 
		int yy=priceFloor+i*sdy; //sdy is negative
	        g2.draw(new Line2D.Double(0, yy, myChartWidth, yy));	
		g2.setStroke(stroke);
		g2.setColor(Color.black);         
		g2.drawString(" "+dataF.format(i*vd+priceMin) ,myChartWidth, yy);
	}
	int yName=priceFloor+2*sdy;

	g2.setColor(Color.blue);
        g2.setStroke(stroke);
        GeneralPath polylineD = new GeneralPath(GeneralPath.WIND_EVEN_ODD,
                                               chartPoints);
	DrawData aData=myDrawData.get(0);
	
        sy=(int)((aData.price-priceMin)*priceDrawRange/priceSpan);       
        polylineD.moveTo (0, priceFloor+ sy);// sy is negative for priceDrawRange is negative
	//g2.draw(new Line2D.Double(0, myGridFloor, 0,myGridFloor-sy));                 
	//String sDiff;
        for (int i=1; i<chartPoints; i++)
        {
		aData=myDrawData.get(i);
            if (aData.price < priceMin) continue;
            sx=(int)(myChartWidth*i/chartPoints);
            sy=(int)((double)(aData.price-priceMin)*priceDrawRange/priceSpan);
            polylineD.lineTo(sx, priceFloor+sy);
            //double dNow=0;
        	//dNow=aData.price;
            //System.out.println(sx+";"+sy+";"+i);
        };
        g2.draw(polylineD);

	g2.setStroke(stroke);
	g2.setColor(Color.red);
        
/*plot volume*/
        g2.setColor(Color.green);
        GeneralPath polylineDV = new GeneralPath(GeneralPath.WIND_EVEN_ODD,
                                               chartPoints);

	aData=myDrawData.get(0);
	int volDrawRange=volCeiling-volFloor;
              sy=(int)((double)aData.volDelta*volDrawRange/volDeltaMax);
        polylineDV.moveTo (0, volFloor+sy);
        polylineDV.lineTo(0, volFloor);
	int iLastAlarmed=0;
	for (int i=1; i<chartPoints; i++)
        {
            aData=myDrawData.get(i);
		if (aData.volDelta < 0) continue;
            sx=(int)(myChartWidth*i/chartPoints);
            sy=(int)((double)aData.volDelta*volDrawRange/volDeltaMax);
            polylineDV.moveTo(sx, volFloor);
            	polylineDV.lineTo(sx, volFloor+sy);
		if (aData.volDelta > pVolume) 
		{
			if (i - iLastAlarmed > 5)
			{
			g2.setColor(Color.magenta);
			g2.drawString("��"+aData.volDelta, sx, volFloor+sy);
				iLastAlarmed=i;
			}
			g2.setColor(Color.green);
		}
        };
        g2.draw(polylineDV);

        g2.setColor(Color.blue);
      g2.draw(new Line2D.Double(0, volFloor+2.5*sdy, myChartWidth, volFloor+2.5*sdy));
	g2.drawString("V:"+dataIntF.format(volDeltaMax), myChartWidth*95/100, volFloor+(int)(2.5*sdy)-showHeight/5);
      g2.draw(new Line2D.Double(0, volFloor+1.25*sdy, myChartWidth, volFloor+1.25*sdy));
	g2.drawString("V:"+dataIntF.format(volDeltaMax/2), myChartWidth*95/100, volFloor+(int)(1.25*sdy)-showHeight/5);
	

//time
	g2.setColor(Color.red);
	Date tNow=new Date();
	g2.drawString((YhSymb==null?mySymbol:YhSymb), 0, priceCeiling);
	g2.drawString("TIME:"+tNow.toString().substring(11, 19), d.width-2*showWidth, showHeight);
	g2.drawString(samplingStartFrom, 0, d.height-showHeight-2);
	g2.drawString(samplingEnd, myChartWidth, d.height-showHeight-2);
	g2.drawString("Last="+lastPrice, myChartWidth*4/5, showHeight);
	g2.drawString("Vol:"+lastVol, 0, yName);
	g2.drawString(lastChange, myChartWidth/3, priceFloor);
        g2.drawString(changeInPercent()+"%", 2*myChartWidth/3, priceFloor);
	g2.setStroke(stroke);

	return true;
	}

	BufferedImage buildImgBuf(Dimension d)
	{

	//int dmX=d.width;
	//int dmY=d.height;
	//Rectangle area=new Rectangle(d);
	BufferedImage gBufImg= ImgFactory.getImg(); //new BufferedImage(dmX, dmY, BufferedImage.TYPE_INT_ARGB);
	Graphics2D g2=gBufImg.createGraphics();
	if (DrawGraphics(g2, d))
		return gBufImg;
		return null;

	}

    public void paint(Graphics g) {
        Graphics2D g2 = (Graphics2D) g;
        Dimension d = getSize();
	BufferedImage toDraw=buildImgBuf(d);
	if (toDraw != null) g2.drawImage(toDraw, null, 0, 0);

	//g2.dispose();
	
	}

	public boolean fillImg(BufferedImage bi, int width, int height)
	{
	Graphics g=bi.createGraphics();
	
		Graphics2D g2 = (Graphics2D) g;
        	//BufferedImage toDraw=buildImgBuf(new Dimension(width, height));
		boolean ok=DrawGraphics(g2, new Dimension(width, height));
		//if (toDraw == null) return false;
		g2.setBackground(Color.white);
		
		if (ok) g2.drawImage(bi, null, 0, 0);
		return ok;	
	}

synchronized boolean putImg2File(BufferedImage bi, File toFile)
{
try {
	ImageIO.write(bi, "png", toFile);
} catch (IOException e){return false;}
	return true;
}

public void run() 
{
        //ShapesDemo2D Demo2D = new ShapesDemo2D();
        //f.getContentPane().add("Center", Demo2D);
        //Demo2D.init();
        int width=600, height=500;
//System.out.println("I am here");
	readChartData();
	//f.pack();
	//Demo2D.setSize(new Dimension(width, height));
        //f.setSize(new Dimension(width, height));
        //f.setVisible(true);
	//BufferedImage bi=(BufferedImage)Demo2D.createImage(width, height);
	BufferedImage bi=ImgFactory.getImg(); //new BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB);
	Graphics g=bi.getGraphics();
	//Demo2D.paint(g);
	if (myDrawData.size() > 0 && fillImg(bi, width, height))
	{
	Graphics2D g2=(Graphics2D)g;
	g2.getBackground();
        //g2.setForeground(fg);	
	g2.drawImage(bi, null, 0, 0);
	//try {
	String dirSymb=dataDir+mySymbol;
		File myDir=new File(dirSymb+"/");
		if (!myDir.exists()) myDir.mkdir();
		File myNew=new File(dirSymb+"/"+mySymbol+"_realtime.png");
		if (putImg2File(bi, myNew) ){
		File myDup=new File(dirSymb+"/"+mySymbol+"_realtime2.png");
		File myOld=new File(dirSymb+"/"+mySymbol+"_realtimeOld.png");
		if (myOld.exists()) myOld.delete();
		if (myDup.exists() && !myOld.exists()) myDup.renameTo(myOld);
		myNew.renameTo(myDup);
		}
	//} catch (IOException e){System.out.println("Cannot create bmp file");}
	}
}
//end of program

public static void main(String[] args)
{
Vector<String> myQuotes=new Vector<String>();
String mktStartTime="08.00";
String mySymbol="TSE";
String fileName=mySymbol+"/"+mySymbol+"120320"+"Quote.txt";
System.out.println("Checking "+mySymbol);		
	File todayF=new File(fileName);
	if (todayF.exists())
	{
		try{
	BufferedReader oldData=new BufferedReader(new FileReader(fileName));
	
	String lastPrice="0.0";
	boolean foundData=false;
	String aLine;
		while ((aLine = oldData.readLine()) != null)
		{
			String[] tokens=aLine.split("-");
			if (tokens.length < 5) continue;
			lastPrice=tokens[3];
			int iC=tokens[2].indexOf(":");
			int iH=Integer.parseInt(tokens[2].substring(0, iC));
			if (iH > 15)
			{
			 continue;
			}
			if (!foundData)
			{
				myQuotes.add(new String(mySymbol+"-"+"120320"+"-"+mktStartTime+"-"+lastPrice+"-0"));
				foundData=true;	
				//got1stData=true;
				//if (mySymbol.compareTo("AAPL") == 0)
				{				
				//System.out.println("first data:"+aLine);
				}
			}
			myQuotes.add(aLine);						
		}
		oldData.close();		
		}catch (IOException e){  }
	}
	if (myQuotes.size() > 3)
	{
System.out.println("Total data count : "+myQuotes.size());
		QuoteSecondCharter aCharter=new QuoteSecondCharter(myQuotes);
		aCharter.setMktStartTime(mktStartTime);
		aCharter.setTestMode(true);
		Thread aThread=new Thread(aCharter);
		aThread.start();
		try{
			aThread.join();
		} catch (InterruptedException e){}
				
	}
}
}
